{"version":3,"sources":["images/empty.svg","images/boy1.svg","images/boy2.svg","images/boy3.svg","images/boy4.svg","images/girl1.svg","images/girl2.svg","images/girl3.svg","images/girl4.svg","images/cupGold.svg","images/cupSilver.svg","images/cupBronze.svg","images/cloudRainIcon.svg","actions/UserActions.ts","reducers/userReducer.ts","components/shared/Button.tsx","actions/GameActions.ts","actions/GeneralAppActions.ts","services/socket-service.ts","components/Menu.tsx","components/authentication/Login.tsx","components/authentication/AvatarImage.tsx","reducers/gameReducer.ts","components/authentication/Signup.tsx","components/LoginSignup.tsx","components/game/PlayerAvatar.tsx","components/game/AnswerComponent.tsx","components/game/MultipleAnswerQuestionComponent.tsx","components/game/RangeQuestionComponent.tsx","components/shared/GeneralLoader.tsx","components/game/GameInfoComponent.tsx","components/game/ResolveRoundComponent.tsx","components/game/ResolveGameComponent.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","reducers/generalAppReducer.ts","store/Store.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","UserActionTypes","PlayerStatus","Intents","initialUserState","user","undefined","intent","LOGIN","signupData","email","password","nickName","avatar","loginData","token","status","IDLE","challengeRoomId","isLoading","isError","error","Button","GameActionTypes","GeneralAppActionTypes","props","react_default","a","createElement","onClick","btnName","socket","connectionEndPoint","test","navigator","userAgent","service","init","console","log","localStorage","getItem","io","query","concat","reconnection","disconnected","store","dispatch","type","ERROR","message","attachSocketEventListeners","on","data","setItem","connect","LOGIN_SUCCESS","reason","LOGIN_FAILED","SIGNUP_FAILED","SIGNUP_SUCCESS","LOGOUT","CREATE_RANDOM_GAME","roomId","gameInfo","playerInfo","opponents","START_RANDOM_GAME","question","RECEIVED_QUESTION","emit","SHOW_QUESTION","resolveData","RESOLVE_GAME","RESOLVE_ROUND","START_NEW_ROUND","correctAnswer","getState","gameState","opponentsAnswers","ANSWER_RECEIVED","getUser","setIntent","e","target","CHANGE_INTENT","id","parentNode","TRY_LOGIN","tryLogin","trySignup","TRY_SIGNUP","searchForRandomGame","SEARCHING_FOR_GAME","REQUEST_RANDOM_GAME_SEARCH","getQuestion","sendMultipleAnswer","event","SEND_ANSWER","answer","sendRangedAnswer","preventDefault","document","getElementById","value","endGame","EXIT_GAME","RESET_GAME_STATE","Menu","randomBtnProps","friendBtnProps","challengeFriend","className","shared_Button","React","Component","userState","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","name","setState","defineProperty","onSubmit","htmlFor","onChange","AvatarImage","GameStatus","src","alt","avatars","boy1","boy2","boy3","boy4","girl1","girl2","girl3","girl4","empty","Signup","showAvatars","closeAvatars","handleShowAvatars","handleSelectAvatar","_this2","avatarImages","keys","forEach","key","avatarProps","push","map","image","authentication_AvatarImage","LoginSignup","SIGNUP","authentication_Signup","authentication_Login","initialGameState","NOT_PLAYING","currentQuestion","currentAnswer","resolveGameData","PlayerAvatar","healthStyle","width","health","class","damaged","style","correctAnswers","wrongAnswers","AnswerComponent","elementClass","active","index","MultipleAnswerQuestionComponent","resolveAnswer","body","game_AnswerComponent","assign","RangeQuestionComponent","firstOpponentAnswer","secondOpponentAnswer","autoFocus","waitingForAnswers","GeneralLoader","text","GameInfoComponent","currenQuestionNumber","questionsCount","currentQuestionCategory","game_PlayerAvatar","ResolveRoundComponent","playerKey","opponentKeys","opponentOneProps","objectSpread","opponentTwoProps","damage","prizeIcons","winner","cupGold","second","cupSilver","third","cupBronze","loser","cloudRainIcon","ResolveGameComponent","Game","STARTING","RUNNING","GETTING_NEXT_QUESTION","element","gameInfoProps","showGameInfo","shared_GeneralLoader","WAITING_FOR_ANSWER","questionType","game_MultipleAnswerQuestionComponent","game_RangeQuestionComponent","ANSWER_SUBMITTED","RESOLVING_ANSWERS","RESOLVING_ROUND","resolveRoundProps","game_ResolveRoundComponent","RESOLVING_GAME","resolveGameProps","game_ResolveGameComponent","currentQuestionNumber","category","game_GameInfoComponent","App","generalAppState","components_LoginSignup","components_Menu","SEARCHING_FOR_RANDOM_GAME","PLAYING","components_Game","Boolean","window","location","hostname","match","initialAppState","rootReducer","combineReducers","arguments","length","action","CANCEL_RANDOM_GAME_SEARCH","d","__webpack_exports__","src_store","createStore","ReactDOM","render","es","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uLCI5BC,ECAAC,EAUAC,8GDVAF,oiBCAAC,kNAUAC,iDAgCZ,IAAMC,EAA8B,CAChCC,UAAMC,EACNC,OAAQJ,EAAQK,MAChBC,WAAY,CACRC,MAAO,GACPC,SAAU,GACVC,SAAU,GACVC,OAAQ,SAEZC,UAAW,CACPJ,MAAO,GACPC,SAAU,IAEdI,WAAOT,EACPU,OAAQd,EAAae,KACrBC,qBAAiBZ,EACjBa,WAAW,EACXC,SAAS,EACTC,MAAO,GACPX,MAAO,GACPC,SAAU,IC1DCW,ICJHC,ECJAC,EFQGF,EANf,SAAgBG,GACR,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,EAAMI,SAAUJ,EAAMK,qCCAvCP,2eCJAC,+BCMZ,IAKIO,EALAC,EAAqB,iBAErB,iEAAiEC,KAAKC,UAAUC,aAChFH,EAAqB,8BAIlB,IAAMI,EAAe,CACxBC,KAAM,WACFC,QAAQC,IAAI,WACZ,IAAIxB,EAAQyB,aAAaC,QAAQ,SACjCV,EAASW,IAAGV,EAAoB,CAACW,MAAO5B,EAAK,cAAA6B,OAAiB7B,GAAU,GAAI8B,cAAc,IAC1FP,QAAQC,IAAIR,IACa,IAAtBA,EAAOe,aACNC,GAAMC,SAAS,CACXC,KAAMzB,EAAsB0B,MAC5BC,QAAS,qLAoFzB,SAASC,IACLrB,EAAOsB,GAAG,gBAAiB,SAACC,GACxBd,aAAae,QAAQ,QAASD,EAAKvC,OACnCgB,EAASW,IAAGc,QAAQxB,EAAoB,CAACW,MAAK,cAAAC,OAAgBU,EAAKvC,OAAS8B,cAAc,IAC1FO,IACAL,GAAMC,SAAS,CACXC,KAAMhD,EAAgBwD,cACtBpD,KAAMiD,EAAKjD,KACXU,MAAOuC,EAAKvC,UAIpBgB,EAAOsB,GAAG,eAAgB,SAACC,GACvBhB,QAAQC,IAAI,SACZD,QAAQC,IAAIe,EAAKI,QACjBX,GAAMC,SAAS,CACXC,KAAMhD,EAAgB0D,aACtBtC,MAAOiC,EAAKI,WAIpB3B,EAAOsB,GAAG,OAAQ,SAAChD,GACfiC,QAAQC,IAAI,YACZD,QAAQC,IAAIlC,GACZA,EACA0C,GAAMC,SAAS,CACb3C,KAAMA,EACN4C,KAAMhD,EAAgBwD,gBAExBV,GAAMC,SAAS,CACbC,KAAMhD,EAAgB0D,iBAI1B5B,EAAOsB,GAAG,QAAS,SAACC,GAClBhB,QAAQC,IAAIe,KAIhBvB,EAAOsB,GAAG,gBAAiB,SAACC,GACxBhB,QAAQC,IAAI,SACZD,QAAQC,IAAIe,EAAKI,QACjBX,GAAMC,SAAS,CACXC,KAAMhD,EAAgB2D,cACtBvC,MAAOiC,EAAKI,WAIpB3B,EAAOsB,GAAG,iBAAkB,SAACC,GACzBhB,QAAQC,IAAI,0BACZQ,GAAMC,SAAS,CACXC,KAAMhD,EAAgB4D,mBAI9B9B,EAAOsB,GAAG,iBAAkB,WACxBtB,EAASW,IAAGc,QAAQxB,GACpBoB,IACAL,GAAMC,SAAS,CACbC,KAAMhD,EAAgB6D,WAI5B/B,EAAOsB,GAAG,sBAAuB,SAACC,GAC9BhB,QAAQC,IAAI,oBACZD,QAAQC,IAAIe,GACZP,GAAMC,SAAS,CACXC,KAAM1B,EAAgBwC,mBACtBC,OAAQV,EAAKU,OACbC,SAAUX,EAAKW,SACfC,WAAYZ,EAAKY,WACjBC,UAAWb,EAAKa,cAIxBpC,EAAOsB,GAAG,eAAgB,WACtBf,QAAQC,IAAI,gBACZQ,GAAMC,SAAS,CACXC,KAAM1B,EAAgB6C,sBAI9BrC,EAAOsB,GAAG,eAAgB,SAACC,GACvBhB,QAAQC,IAAI,eACZD,QAAQC,IAAIe,EAAKe,UACjBtB,GAAMC,SAAS,CACXC,KAAM1B,EAAgB+C,kBACtBD,SAAUf,EAAKe,WAEnBtC,EAAOwC,KAAK,uBAGhBxC,EAAOsB,GAAG,gBAAiB,WACvBN,GAAMC,SAAS,CACXC,KAAM1B,EAAgBiD,kBAI9BzC,EAAOsB,GAAG,eAAgB,SAACoB,GACvBnC,QAAQC,IAAI,4BACZD,QAAQC,IAAIkC,GACZ1B,GAAMC,SAAS,CACXC,KAAM1B,EAAgBmD,aACtBD,YAAaA,MAWrB1C,EAAOsB,GAAG,gBAAiB,SAACC,GACxBhB,QAAQC,IAAI,4BACZD,QAAQC,IAAIe,GACZP,GAAMC,SAAS,CACXC,KAAM1B,EAAgBoD,cACtBF,YAAanB,MAIrBvB,EAAOsB,GAAG,kBAAmB,WACzBf,QAAQC,IAAI,sBACZQ,GAAMC,SAAS,CACXC,KAAM1B,EAAgBqD,oBAI9B7C,EAAOsB,GAAG,cAAe,SAACC,GACtBhB,QAAQC,IAAI,iBACZD,QAAQC,IAAIe,EAAKuB,eACjBvC,QAAQC,IAAI,kBACZD,QAAQC,IAAIQ,GAAM+B,WAAWC,WAC7BzC,QAAQC,IAAI,0BACZD,QAAQC,IAAIe,EAAK0B,kBAGbjC,GAAMC,SAAS,CACXC,KAAM1B,EAAgB0D,gBACtBJ,cAAevB,EAAKuB,cACpBG,iBAAkB1B,EAAK0B,qBA/N3B5B,GACAd,QAAQC,IAAI,sBACZH,EAAQ8C,WAEZ5C,QAAQC,IAAI,uBAEhB4C,UAAW,SAACC,GACR9C,QAAQC,IAAI,aACZD,QAAQC,IAAI6C,EAAEC,QACdtC,GAAMC,SAAS,CACXC,KAAKhD,EAAgBqF,cACrB/E,OAAQ6E,EAAEC,OAAOE,GAAKH,EAAEC,OAAOE,GAAKH,EAAEC,OAAOG,WAAWD,MAGhEL,QAAS,WACL5C,QAAQC,IAAI,sBACZR,EAAOwC,KAAK,YACZxB,GAAMC,SAAS,CACXC,KAAKhD,EAAgBwF,aAG7BC,SAAU,SAAChF,EAAeC,GACtBoC,GAAMC,SAAS,CACXC,KAAKhD,EAAgBwF,UACrB3E,UAAW,CAACJ,QAAOC,cAEvBoB,EAAOwC,KAAK,QAAS,CAAC7D,MAAOA,EAAOC,SAAUA,KAElDgF,UAAW,SAACjF,EAAeC,EAAkBC,EAAkBC,GAC3DkC,GAAMC,SAAS,CACXC,KAAKhD,EAAgB2F,WACrBnF,WAAY,CACRC,QAAOC,WAAUC,WAAUC,YAGnCkB,EAAOwC,KAAK,SAAU,CAAC7D,MAAOA,EAAOC,SAAUA,EAAUC,SAAUA,EAAUC,OAAQA,KAGzFgF,oBAAqB,WACjBvD,QAAQC,IAAI,+BACZD,QAAQC,IAAIR,GACZA,EAAOwC,KAAK,oBACZxB,GAAMC,SAAS,CACXC,KAAMhD,EAAgB6F,qBAE1B/C,GAAMC,SAAS,CACXC,KAAM1B,EAAgBwE,8BAG9BC,YAAa,WACT1D,QAAQC,IAAI,oBACZR,EAAOwC,KAAK,iBAEhB0B,mBAAoB,SAACC,GACjB5D,QAAQC,IAAI2D,EAAMb,OAAOE,IACzBxC,GAAMC,SAAS,CACXC,KAAM1B,EAAgB4E,YACtBC,OAAQF,EAAMb,OAAOE,KAEzBxD,EAAOwC,KAAK,sBAAuB,CAAC6B,OAAQF,EAAMb,OAAOE,MAE7Dc,iBAAkB,SAACH,GACfA,EAAMI,iBACN,IAAIF,EAAUG,SAASC,eAAe,0BAA+CC,MACrF1D,GAAMC,SAAS,CACXC,KAAM1B,EAAgB4E,YACtBC,OAAQF,EAAMb,OAAOE,KAEzBxD,EAAOwC,KAAK,oBAAqB,CAAC6B,OAAQA,KAE9CM,QAAS,WACLpE,QAAQC,IAAI,eACZQ,GAAMC,SAAS,CACXC,KAAMhD,EAAgB0G,YAE1B5D,GAAMC,SAAS,CACXC,KAAM1B,EAAgBqF,yBCtF5BC,mLAIF,IAAIC,EAAiB,CACnBhF,QAAS,cACTD,QAASO,EAAQyD,qBAEfkB,EAAiB,CACnBjF,QAAS,mBACTD,QAASO,EAAQ4E,iBAGnB,OACEtF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gBACbvF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsF,EAAWJ,GACZpF,EAAAC,EAAAC,cAACsF,EAAWH,YAjBHI,IAAMC,WAgCV5D,cAPS,SAACT,GACvB,MAAO,CACLsE,UAAWtE,EAAMsE,UACjBtC,UAAWhC,EAAMgC,YAINvB,CAAyBqD,kBC1ClCS,cACF,SAAAA,EAAY7F,GAAW,IAAA8F,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACnBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjG,KAEDqG,MAAQ,CACTpH,MAAO6G,EAAK9F,MAAM4F,UAAUvG,UAAUJ,MACtCC,SAAU,IAEd4G,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,aAAeX,EAAKW,aAAaF,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IARDA,4EAWVrB,GACT,IAAIiC,EAAYjC,EAAMb,QAAUa,EAAMb,OAAO8C,KAC7CT,KAAKU,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACKW,EAAMjC,EAAMb,OAAOoB,6CAIfP,GACTA,EAAMI,iBACNlE,EAAQsD,SAASgC,KAAKI,MAAMpH,MAAOgH,KAAKI,MAAMnH,2CAI9C,OACIe,EAAAC,EAAAC,cAAA,QAAM0G,SAAUZ,KAAKQ,cACjBxG,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,SAAf,SACA7G,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOkF,KAAK,QAAQ1B,MAAOiB,KAAKI,MAAMpH,MAAO8H,SAAUd,KAAKK,gBAE5ErG,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,YAAf,YACA7G,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,WAAWkF,KAAK,WAAW1B,MAAOiB,KAAKI,MAAMnH,SAAU6H,SAAUd,KAAKK,gBAErFL,KAAKjG,MAAM4F,UAAUjG,SAAWM,EAAAC,EAAAC,cAAA,SAAI8F,KAAKjG,MAAM4F,UAAUhG,OAC1DK,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,SAASwD,MAAM,UAA5B,iBArCIU,IAAMC,WAiDX5D,cANS,SAACT,GACrB,MAAO,CACLsE,UAAWtE,EAAMsE,YAIR7D,CAAyB8D,GCxCzBmB,ICTHC,EDSGD,EANf,SAAqBhH,GACjB,OACIC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAe1B,GAAI9D,EAAMgF,MAAOkC,IAAKlH,EAAMkH,IAAK9G,QAASJ,EAAMI,QAAS+G,IAAG,UAAAhG,OAAYnB,EAAMgF,mKEMhHoC,EAAe,CACfC,KAAMA,IACNC,KAAMA,IACNC,KAAMA,IACNC,KAAMA,IACNC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,KAeLC,cACF,SAAAA,EAAY9H,GAAW,IAAA8F,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACnBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMjG,KAEDqG,MAAQ,CACTpH,MAAO6G,EAAK9F,MAAM4F,UAAU5G,WAAWC,MACvCC,SAAU4G,EAAK9F,MAAM4F,UAAU5G,WAAWE,SAC1CC,SAAU2G,EAAK9F,MAAM4F,UAAU5G,WAAWG,SAC1CC,OAAO0G,EAAK9F,MAAM4F,UAAU5G,WAAWI,OACvC2I,aAAa,GAEjBjC,EAAKkC,aAAelC,EAAKkC,aAAazB,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKmC,kBAAoBnC,EAAKmC,kBAAkB1B,KAAvBR,OAAAS,EAAA,EAAAT,CAAAD,IACzBA,EAAKoC,mBAAqBpC,EAAKoC,mBAAmB3B,KAAxBR,OAAAS,EAAA,EAAAT,CAAAD,IAC1BA,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,aAAeX,EAAKW,aAAaF,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IAdDA,8EAkBfG,KAAKI,MAAM0B,aACX9B,KAAKU,SAAS,CACVoB,aAAa,gDAKrB9B,KAAKU,SAAS,CACVoB,aAAc9B,KAAKI,MAAM0B,yDAIdtD,GACfwB,KAAKU,SAAS,CACVvH,OAAQqF,EAAMb,OAAOE,KAEzBmC,KAAKgC,yDAGIxD,GACT,IAAIiC,EAAejC,EAAMb,QAAUa,EAAMb,OAAO8C,KAC5C1B,EAAgBP,EAAMb,OAAOoB,MACjCiB,KAAKU,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACKW,EAAM1B,yCAIFP,GACTA,EAAMI,iBACNlE,EAAQuD,UAAU+B,KAAKI,MAAMpH,MAAOgH,KAAKI,MAAMnH,SAAU+G,KAAKI,MAAMlH,SAAU8G,KAAKI,MAAMjH,yCAGpF,IAAA+I,EAAAlC,KACLpF,QAAQC,IAAI,mBACZD,QAAQC,IAAImF,KAAKjG,MAAM4F,WACvB,IAAIwC,EAAmB,GAUvB,OATArC,OAAOsC,KAAKjB,GAASkB,QAAQ,SAACC,GAC1B,IAAIC,EAAc,CACdD,IAAKA,EACLvD,MAAOuD,EACPrB,IAAKE,EAAQmB,GACbnI,QAAS+H,EAAKD,oBAElBE,EAAaK,KAAKD,KAGlBvI,EAAAC,EAAAC,cAAA,QAAM0G,SAAUZ,KAAKQ,aAAcrG,QAAS6F,KAAK+B,cAC7C/H,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,SAAf,SACA7G,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOkF,KAAK,QAAQ1B,MAAOiB,KAAKI,MAAMpH,MAAO8H,SAAUd,KAAKK,gBAE5ErG,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,YAAf,YACA7G,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,WAAWkF,KAAK,WAAW1B,MAAOiB,KAAKI,MAAMnH,SAAU6H,SAAUd,KAAKK,gBAEtFrG,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,YAAf,YACA7G,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOkF,KAAK,WAAW1B,MAAOiB,KAAKI,MAAMlH,SAAU4H,SAAUd,KAAKK,gBAElFrG,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAO2G,QAAQ,UAAf,UACA7G,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,kBAAkB0B,IAAKE,EAAQnB,KAAKI,MAAMjH,QAAS+H,IAAI,kBAAkB/G,QAAS6F,KAAKgC,oBACtGhI,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,qBACVS,KAAKI,MAAM0B,aAAeK,EAAaM,IAAI,SAACC,GACzC,OAAO1I,EAAAC,EAAAC,cAACyI,EAAgBD,OAInC1C,KAAKjG,MAAM4F,UAAUjG,SAAWM,EAAAC,EAAAC,cAAA,SAAI8F,KAAKjG,MAAM4F,UAAUhG,OAC1DK,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,SAASwD,MAAM,UAA5B,kBAzFKU,IAAMC,WAqGZ5D,eANS,SAACT,GACrB,MAAO,CACLsE,UAAWtE,EAAMsE,YAIR7D,CAAyB+F,GC/HlCe,oLAGF,OACI5I,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gBACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,YACbvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAWS,KAAKjG,MAAM4F,UAAU9G,SAAWJ,EAAQK,MAAQ,kBAAoB,oBAChFqB,QAASO,EAAQ+C,UACjBI,GAAG,SACL7D,EAAAC,EAAAC,cAAA,oBAIFF,EAAAC,EAAAC,cAAA,OAAKqF,UAAWS,KAAKjG,MAAM4F,UAAU9G,SAAWJ,EAAQoK,OAAS,kBAAoB,oBAChF1I,QAASO,EAAQ+C,UACjBI,GAAG,UACN7D,EAAAC,EAAAC,cAAA,sBAKJF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,aACZS,KAAKjG,MAAM4F,UAAU9G,SAAWJ,EAAQoK,OAAS7I,EAAAC,EAAAC,cAAC4I,GAAD,MAAa9I,EAAAC,EAAAC,cAAC6I,EAAD,eAtBnDtD,IAAMC,WAmCjB5D,eANS,SAACT,GACvB,MAAO,CACLsE,UAAWtE,EAAMsE,YAIN7D,CAAyB8G,cF5C5B5B,ibA8CZ,IAAMgC,GAA8B,CAChC1G,OAAQ,KACRhD,OAAQ0H,EAAWiC,YACnB1G,cAAU3D,EACV4D,gBAAY5D,EACZsK,qBAAiBtK,EACjBuK,mBAAevK,EACfuE,mBAAevE,EACf6D,eAAW7D,EACXmE,iBAAanE,EACbwK,qBAAiBxK,EACjBa,WAAW,EACXC,SAAS,EACTC,WAAOf,GGrDPuI,GAAe,CACfC,KAAMA,IACNC,KAAMA,IACNC,KAAMA,IACNC,KAAMA,IACNC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,IACPC,MAAOA,KAmCIyB,OAtBf,SAAsBtJ,GAClB,IAAMuJ,EAAc,CAChBC,MAAOxJ,EAAMyJ,OAAS,KAG1B,OACIxJ,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,4BACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gBAAgB2B,IAAI,SAASD,IAAKlH,EAAMZ,OAASgI,GAAQpH,EAAMZ,QAAUgI,GAAQS,OAChG5H,EAAAC,EAAAC,cAAA,OAAKqF,UAAW,gBAAkBxF,EAAM0J,OACpCzJ,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAexF,EAAMb,UACpCc,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAS,iBAAArE,OAAmBnB,EAAM0J,MAAzB,KAAAvI,OAAkCnB,EAAM2J,QAAU,WAAa,IAAMC,MAAOL,KAE9FtJ,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,4BACXvF,EAAAC,EAAAC,cAAA,QAAMqF,UAAU,iBAAhB,YAA0CxF,EAAM6J,gBAChD5J,EAAAC,EAAAC,cAAA,QAAMqF,UAAU,eAAhB,UAAsCxF,EAAM8J,kBCZjDC,OAxBf,SAAyB/J,GACrB,IAAIgK,EAAuB,mBAgB3B,OAdKhK,EAAMiK,SACPD,GAAgB,aACjBhK,EAAM2E,QAAU3E,EAAM2E,SAAW3E,EAAM8D,KACtCkG,GAAgB,eAEjBhK,EAAMoD,gBAAkBpD,EAAM8D,KAC7BkG,GAAgB,mBACjBhK,GAASA,EAAM0C,WACdqD,OAAOsC,KAAKrI,EAAM0C,WAAW4F,QAAQ,SAACC,EAAK2B,GACvCrJ,QAAQC,IAAId,EAAOA,EAAM8D,IACtB9D,EAAM0C,UAAU6F,GAAKa,gBAAkBpJ,EAAM8D,KAC5CkG,GAAY,YAAA7I,OAAgB+I,EAAQ,MAI7CjK,EAAAC,EAAAC,cAAA,OAAKqF,UAAWwE,EAAclG,GAAI9D,EAAM8D,GAAI1D,QAASJ,EAAMiK,OAAStJ,EAAQ6D,wBAAqB,GAC/FxE,EAAM4C,SAAS5C,EAAM8D,MCEfqG,OArBf,SAAyCnK,GAGrC,IAAIoK,EACAhH,EAGA,OANJvC,QAAQC,IAAI,sBACZD,QAAQC,IAAI,iBAAkBd,EAAMoD,eAGEgH,KAAtCpK,EAAM2E,SAAU3E,EAAMoD,eACiBA,EAAvCpD,EAAM2E,SAAW3E,EAAMoD,cAEfnD,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,sBACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iBACXvF,EAAAC,EAAAC,cAAA,SAAIH,EAAM4C,SAASyH,OAEvBpK,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAf,KAAoCvF,EAAAC,EAAAC,cAACmK,GAAoBvE,OAAOwE,OAAO,CAACzG,GAAG,WAAY9D,KAC5FC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAf,KAAoCvF,EAAAC,EAAAC,cAACmK,GAAoBvE,OAAOwE,OAAO,CAACzG,GAAG,WAAY9D,KAC5FC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAf,KAAoCvF,EAAAC,EAAAC,cAACmK,GAAoBvE,OAAOwE,OAAO,CAACzG,GAAG,WAAY9D,KAC5FC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,eAAf,KAAoCvF,EAAAC,EAAAC,cAACmK,GAAoBvE,OAAOwE,OAAO,CAACzG,GAAG,WAAY9D,KAC3FoK,GAAiBnK,EAAAC,EAAAC,cAAA,QAAMqF,UAAWpC,EAAgB,mBAAqB,kBAAmBA,EAAgB,iBAAmB,kBCuB/HoH,OAtCf,SAAgCxK,GAC5Ba,QAAQC,IAAI,sBACZD,QAAQC,IAAI,qCACZD,QAAQC,IAAId,EAAM0C,WAClB,IAAI+H,OAA0B5L,EAC1B6L,OAA4B7L,EAOhC,OANAmB,EAAM0C,WAAaqD,OAAOsC,KAAKrI,EAAM0C,WAAW4F,QAAQ,SAACC,EAAK2B,GAC7C,IAAVA,IACCO,EAAsBzK,EAAM0C,UAAU6F,GAAKa,eAClC,IAAVc,IACCQ,EAAuB1K,EAAM0C,UAAU6F,GAAKa,iBAGhDnJ,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,sBACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iBACXvF,EAAAC,EAAAC,cAAA,SAAIH,EAAM4C,SAASyH,OAEvBpK,EAAAC,EAAAC,cAAA,QAAM0G,SAAUlG,EAAQiE,kBACpB3E,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,cACXvF,EAAAC,EAAAC,cAAA,SAAOqF,UAAWxF,EAAMiK,OAAS,GAAK,WAAYU,WAAS,EAACnJ,KAAK,SAASkF,KAAK,SAAS5C,GAAG,4BAE/F7D,EAAAC,EAAAC,cAAA,UAAQqF,UAAWxF,EAAMiK,OAAS,GAAK,WAAYzI,KAAK,SAASwD,MAAM,UAAvE,WAEHhF,EAAMoD,eACHnD,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BACXvF,EAAAC,EAAAC,cAAA,MAAIqF,UAAU,WAAd,yBACAvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gCAAgCxF,EAAMoD,gBAE5DpD,EAAM4K,mBAAqB3K,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAwBvF,EAAAC,EAAAC,cAAA,wDACjEH,EAAMiK,SAAWjK,EAAM4K,mBACrB3K,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BACViF,GAAuBxK,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BAA2BiF,GACjEC,GAAwBzK,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BAA2BkF,MClCxEG,OATf,SAAuB7K,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,UACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,mBACfvF,EAAAC,EAAAC,cAAA,KAAGqF,UAAU,eAAexF,EAAM8K,QC4CnCC,OApBf,SAA2B/K,GAGnB,OACIC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,uBACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iBACXvF,EAAAC,EAAAC,cAAA,QAAMqF,UAAU,SAAhB,aACAvF,EAAAC,EAAAC,cAAA,QAAMqF,UAAU,SAASxF,EAAMgL,qBAA/B,IAAsDhL,EAAMiL,iBAEhEhL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,6BACXvF,EAAAC,EAAAC,cAAA,QAAMqF,UAAU,SAAhB,aACAvF,EAAAC,EAAAC,cAAA,YAAOH,EAAMkL,wBAA0BlL,EAAMkL,wBAA0B,WAE3EjL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBACXvF,EAAAC,EAAAC,cAACgL,GAAiBpF,OAAOwE,OAAO,CAACb,MAAM,UAAW1J,EAAMyC,gBCK5D2I,OAvCf,SAA+BpL,GAC5B,IACIqL,EADAC,EAAevF,OAAOsC,KAAKrI,EAAM0C,WAElB2I,EAAnBrL,EAAMyC,WAAyBzC,EAAMyC,WAAWqB,GAAiB,MAEjE,IAAIyH,EAAgBxF,OAAAyF,EAAA,EAAAzF,CAAA,GACjB/F,EAAM0C,UAAU4I,EAAa,IADZ,CAEpB5B,MAAO,cAEH+B,EAAgB1F,OAAAyF,EAAA,EAAAzF,CAAA,GACjB/F,EAAM0C,UAAU4I,EAAa,IADZ,CAEpB5B,MAAO,cASP,OANG1J,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,IAC3CH,EAAiB5B,SAAU,GAE5B3J,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,IAC3CD,EAAiB9B,SAAU,GAG/B1J,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,2BACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAWxF,EAAMgD,YAAYqI,GAAWK,OAAS,EAAI,iCAAmC,oCACzFzL,EAAAC,EAAAC,cAACgL,GAAiBpF,OAAOwE,OAAO,CAACb,MAAM,UAAW1J,EAAMyC,WAAYzC,EAAMgD,YAAYqI,GAAWK,OAAS,EAAI,CAAC/B,SAAS,GAAQ,KAChI1J,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAyBxF,EAAMgD,YAAYqI,GAAWK,OAAS,EAAtC,SAAAvK,OAAmDnB,EAAMgD,YAAYqI,GAAWK,OAAhF,WAAkG,uBAE9IzL,EAAAC,EAAAC,cAAA,OAAKqF,UAAWxF,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,EAAI,iCAAmC,oCAC/FzL,EAAAC,EAAAC,cAACgL,GAAiBI,GAClBtL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAyBxF,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,EAA5C,SAAAvK,OAAyDnB,EAAMgD,YAAYsI,EAAa,IAAII,OAA5F,WAA8G,uBAE1JzL,EAAAC,EAAAC,cAAA,OAAKqF,UAAWxF,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,EAAI,iCAAmC,oCAC/FzL,EAAAC,EAAAC,cAACgL,GAAiBM,GAClBxL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAyBxF,EAAMgD,YAAYsI,EAAa,IAAII,OAAS,EAA5C,SAAAvK,OAAyDnB,EAAMgD,YAAYsI,EAAa,IAAII,OAA5F,WAA8G,yGChC9JC,GAAiB,CACjBC,OAAQC,KACRC,OAAQC,KACRC,MAAOC,KACPC,MAAOC,MAyDIC,OA/Cf,SAA8BpM,GAC1B,IAAIsL,EAAevF,OAAOsC,KAAKrI,EAAM0C,WAEjC6I,EAAgBxF,OAAAyF,EAAA,EAAAzF,CAAA,GACjB/F,EAAM0C,UAAU4I,EAAa,IADZ,CAEpB5B,MAAO,cAEH+B,EAAgB1F,OAAAyF,EAAA,EAAAzF,CAAA,GACjB/F,EAAM0C,UAAU4I,EAAa,IADZ,CAEpB5B,MAAO,cAIP,OACIzJ,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,0BACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gCACXvF,EAAAC,EAAAC,cAAA,OAAKqF,UAAW,qBAAuBxF,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,IACtEoD,IAAKyE,GAAW3L,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,KACvDqD,IAAKnH,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,MACpD7D,EAAAC,EAAAC,cAAA,OAAKqF,UAAW,qBAAuBxF,EAAMqJ,gBAAgBiC,EAAa,IACtEpE,IAAKyE,GAAW3L,EAAMqJ,gBAAgBiC,EAAa,KACnDnE,IAAKnH,EAAMqJ,gBAAgBiC,EAAa,MAC5CrL,EAAAC,EAAAC,cAAA,OAAKqF,UAAW,qBAAuBxF,EAAMqJ,gBAAgBiC,EAAa,IACtEpE,IAAKyE,GAAW3L,EAAMqJ,gBAAgBiC,EAAa,KACnDnE,IAAKnH,EAAMqJ,gBAAgBiC,EAAa,OAEhDrL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iCACXvF,EAAAC,EAAAC,cAACgL,GAAiBpF,OAAOwE,OAAO,CAACb,MAAM,UAAW1J,EAAMyC,cAE5DxC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iCACXvF,EAAAC,EAAAC,cAACgL,GAAiBI,IAEtBtL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,iCACXvF,EAAAC,EAAAC,cAACgL,GAAiBM,IAEtBxL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,wBACXvF,EAAAC,EAAAC,cAAA,YACoD,WAA/CH,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,KAAoB,WACZ,WAA/C9D,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,KAAoB,uBACZ,UAA/C9D,EAAMqJ,gBAAgBrJ,EAAMyC,WAAWqB,KAAmB,uBAGnE7D,EAAAC,EAAAC,cAACsF,EAAW,CAACpF,QAAS,kBAAmBD,QAASO,EAAQsE,YC9ChEoH,gMAEFpG,KAAKjG,MAAMsD,UAAU/D,SAAW0H,EAAWqF,UAAYzL,QAAQC,IAAI,8DAKnEmF,KAAKjG,MAAMsD,UAAU/D,SAAW0H,EAAWsF,SAAW5L,EAAQ4D,cAC9D0B,KAAKjG,MAAMsD,UAAU/D,SAAW0H,EAAWuF,uBAAyB7L,EAAQ4D,+CAI5E,IAAIkI,EASAC,EARAnN,EAAqB0G,KAAKjG,MAAMsD,UAAU/D,OAC1CqD,EAAWqD,KAAKjG,MAAMsD,UAAU6F,gBAChCzG,EAAYuD,KAAKjG,MAAMsD,UAAUZ,UACjCF,EAAWyD,KAAKjG,MAAMsD,UAAUd,SAChCC,EAAawD,KAAKjG,MAAMsD,UAAUb,WAGlCkK,GAAe,EAInB,OADA9L,QAAQC,IAAI,YAAavB,GACjBA,GACN,KAAK0H,EAAW5C,mBACdoI,EAAUxM,EAAAC,EAAAC,cAACyM,GAAD,CAAe9B,KAAK,4BAC9B,MAEF,KAAK7D,EAAWqF,SACd,IAAIhB,EAAevF,OAAOsC,KAAK3F,GAE3B6I,EAAgBxF,OAAAyF,EAAA,EAAAzF,CAAA,GACfrD,EAAU4I,EAAa,IADR,CAElB5B,MAAO,cAEL+B,EAAgB1F,OAAAyF,EAAA,EAAAzF,CAAA,GACfrD,EAAU4I,EAAa,IADR,CAElB5B,MAAO,cAET+C,EAAUxM,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,kCACrBvF,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAwBvF,EAAAC,EAAAC,cAACgL,GAAiBpF,OAAOwE,OAAO,CAACb,MAAM,UAAWjH,KACzFxC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAwBvF,EAAAC,EAAAC,cAACgL,GAAiBI,IACzDtL,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,yBAAwBvF,EAAAC,EAAAC,cAACgL,GAAiBM,KAE7D,MAEF,KAAKxE,EAAWsF,QAKhB,KAAKtF,EAAWuF,sBACdG,GAAe,EACfF,EAAUxM,EAAAC,EAAAC,cAACyM,GAAD,CAAe9B,KAAK,6BAC9B,MAEF,KAAK7D,EAAW4F,mBACdF,GAAe,EACf,IAAI3M,EAAQ,CACViK,QAAQ,EACRW,mBAAmB,EACnBhI,SAAUqD,KAAKjG,MAAMsD,UAAU6F,gBAC/BxE,YAAQ9F,EACRuE,mBAAevE,EACf6D,eAAW7D,GAEbgC,QAAQC,IAAI,mBAAoB8B,GAAYA,EAASkK,cACrDL,EAAU7J,GAAsC,aAA1BA,EAASkK,aAA8B7M,EAAAC,EAAAC,cAAC4M,GAAoC/M,GAAWC,EAAAC,EAAAC,cAAC6M,GAA2BhN,GACzI,MAEF,KAAKiH,EAAWgG,iBACdN,GAAe,EACf,IAAI3M,EAAQ,CACViK,QAAQ,EACRW,mBAAmB,EACnBhI,SAAUqD,KAAKjG,MAAMsD,UAAU6F,gBAC/BxE,OAAQsB,KAAKjG,MAAMsD,UAAU8F,cAC7BhG,mBAAevE,EACf6D,eAAW7D,GAEb4N,EAAU7J,GAAsC,aAA1BA,EAASkK,aAA8B7M,EAAAC,EAAAC,cAAC4M,GAAoC/M,GAAWC,EAAAC,EAAAC,cAAC6M,GAA2BhN,GACzI,MAEF,KAAKiH,EAAWiG,kBACdP,GAAe,EACf,IAAI3M,EAAQ,CACViK,QAAQ,EACRW,mBAAmB,EACnBhI,SAAUqD,KAAKjG,MAAMsD,UAAU6F,gBAC/BxE,OAAQsB,KAAKjG,MAAMsD,UAAU8F,cAC7BhG,cAAe6C,KAAKjG,MAAMsD,UAAUF,cACpCV,UAAWuD,KAAKjG,MAAMsD,UAAUZ,WAElC+J,EAAU7J,GAAsC,aAA1BA,EAASkK,aAA8B7M,EAAAC,EAAAC,cAAC4M,GAAoC/M,GAAWC,EAAAC,EAAAC,cAAC6M,GAA2BhN,GACzI,MAEF,KAAKiH,EAAWkG,gBACdR,GAAe,EACf,IAAIS,EAAoB,CACtB3K,WAAYA,EACZC,UAAWA,EACXM,YAAaiD,KAAKjG,MAAMsD,UAAUN,aAEpCyJ,EAAUxM,EAAAC,EAAAC,cAACkN,GAA0BD,GACrC,MAEF,KAAKnG,EAAWqG,eACd,GAAI7K,GAAcwD,KAAKjG,MAAMsD,UAAU+F,gBAAiB,CACtD,IAAIkE,EAAmB,CACrB9K,WAAYA,EACZC,UAAWA,EACX2G,gBAAiBpD,KAAKjG,MAAMsD,UAAU+F,iBAGvCoD,EAAUxM,EAAAC,EAAAC,cAACqN,GAAyBD,GAEvC,MAEF,QACEd,EAAUxM,EAAAC,EAAAC,cAAA,gCAkCd,OATGqC,IACDkK,EAAgB,CACdzB,eAAgBzI,EAASyI,eACzBD,qBAAsBxI,EAASiL,sBAC/BvC,wBAAyBtI,GAAYA,EAAS8K,SAC9CjL,WAAYA,IAKZxC,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,gBACZmH,GAAgB1M,EAAAC,EAAAC,cAACwN,GAAsBjB,GACvCD,UA9JQ/G,IAAMC,WAgLV5D,eAPS,SAACT,GACvB,MAAO,CACLsE,UAAWtE,EAAMsE,UACjBtC,UAAWhC,EAAMgC,YAINvB,CAAyBsK,ICjLlCuB,oLAEF/M,QAAQC,IAAI,iBACZ,IACI2L,EADA7G,EAAYK,KAAKjG,MAAM4F,UAE3B,GAAIK,KAAKjG,MAAM6N,gBAAgBlO,QAC7B8M,EAAUxM,EAAAC,EAAAC,cAAA,WAAM8F,KAAKjG,MAAM6N,gBAAgBjO,YAE3C,QAAQ,GACN,KAAKgG,EAAUlG,UACb+M,EAAUxM,EAAAC,EAAAC,cAACyM,GAAD,CAAe9B,KAAK,eAC9B,MACF,UAAwBjM,IAAnB+G,EAAUhH,KACb6N,EAAUxM,EAAAC,EAAAC,cAAC2N,GAAD,MACV,MACF,KAAKlI,EAAUrG,SAAWd,EAAae,KACrCiN,EAAUxM,EAAAC,EAAAC,cAAC4N,EAAD,MACV,MACF,KAAKnI,EAAUrG,SAAWd,EAAauP,0BAGvC,KAAKpI,EAAUrG,SAAWd,EAAawP,QACrCxB,EAAUxM,EAAAC,EAAAC,cAAC+N,GAAD,MACV,MACF,QACEzB,EAAUxM,EAAAC,EAAAC,cAAC2N,GAAD,MAKhB,OACE7N,EAAAC,EAAAC,cAAA,OAAKqF,UAAU,QACXiH,UAhCQ/G,IAAMC,WA+CT5D,eARS,SAACT,GACvB,MAAO,CACLsE,UAAWtE,EAAMsE,UACjBtC,UAAWhC,EAAMgC,UACjBuK,gBAAiBvM,EAAMuM,kBAIZ9L,CAAyB6L,ICtDpBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECVAC,GAAmC,CACrC7O,SAAS,EACTC,MAAO,ICEL6O,GAAcC,aAA0B,CAC1C9I,UvBwDwD,WAGvD,IAFDS,EAECsI,UAAAC,OAAA,QAAA/P,IAAA8P,UAAA,GAAAA,UAAA,GAFOhQ,EACRkQ,EACCF,UAAAC,OAAA,EAAAD,UAAA,QAAA9P,EACD,OAAQgQ,EAAOrN,MACX,KAAKhD,EAAgBqF,cACjB,OAAOkC,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEIvH,OAAQJ,EAAQmQ,EAAO/P,UAG/B,KAAKN,EAAgBwF,UACjB,OAAO+B,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI3G,WAAW,IAGnB,KAAKlB,EAAgB0D,aACjB,OAAA6D,OAAAyF,EAAA,EAAAzF,CAAA,GACOM,EADP,CAEI3G,WAAW,EACXC,SAAS,EACTC,MAAOiP,EAAOjP,QAGtB,KAAKpB,EAAgBwD,cAEjB,OADAnB,QAAQC,IAAI,kBACLiF,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEIhH,UAAWV,EAAiBU,UAC5BK,WAAW,EACXC,SAAS,EACTf,KAAMiQ,EAAOjQ,KACbU,MAAOuP,EAAOvP,MACdM,MAAO,KAGf,KAAKpB,EAAgB2F,WACjB,OAAO4B,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEIrH,WAAY6P,EAAO7P,WACnBU,WAAW,IAGnB,KAAKlB,EAAgB2D,cACjB,OAAO4D,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI3G,WAAW,EACXC,SAAS,EACTC,MAAOiP,EAAOjP,QAGtB,KAAKpB,EAAgB4D,eACjB,OAAO2D,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEIrH,WAAYL,EAAiBK,WAC7BU,WAAW,EACXC,SAAS,EACTC,MAAO,KAGf,KAAKpB,EAAgB6D,OACjB,OAAO0D,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEIzH,UAAMC,EACNS,MAAO,KAGf,KAAKd,EAAgB6F,mBACjB,OAAO0B,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQd,EAAauP,4BAG7B,KAAKxP,EAAgBmE,kBACjB,OAAOoD,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQd,EAAawP,UAG7B,KAAKzP,EAAgB0G,UACjB,OAAOa,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQd,EAAae,OAG7B,QAEI,OADAqB,QAAQC,IAAI,aACLuF,IuB/If/C,UfqDwD,WAGvD,IAFD+C,EAECsI,UAAAC,OAAA,QAAA/P,IAAA8P,UAAA,GAAAA,UAAA,GAFO1F,GACR4F,EACCF,UAAAC,OAAA,EAAAD,UAAA,QAAA9P,EACD,OAAQgQ,EAAOrN,MACX,KAAK1B,EAAgBwE,2BAEjB,OADAzD,QAAQC,IAAI,8BACLiF,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAW5C,mBACnB3E,WAAW,IAGnB,KAAKI,EAAgBgP,0BACjB,OAAO/I,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWiC,YACnBxJ,WAAW,IAGnB,KAAKI,EAAgBwC,mBACjB,OAAOyD,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWqF,SACnB5M,WAAW,EACXgD,UAAWmM,EAAOnM,UAClBF,SAAUqM,EAAOrM,SACjBC,WAAYoM,EAAOpM,WACnBF,OAAQsM,EAAOtM,SAGvB,KAAKzC,EAAgB6C,kBACjB,OAAOoD,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWsF,UAG3B,KAAKzM,EAAgB+C,kBACjB,OAAOkD,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI8C,gBAAiB0F,EAAOjM,SACxBrD,OAAQ0H,EAAW4F,qBAG3B,KAAK/M,EAAgBiD,cACjB,OAAOgD,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAW4F,qBAG3B,KAAK/M,EAAgB4E,YACjB,OAAOqB,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWgG,iBACnB7D,cAAeyF,EAAOlK,SAG9B,KAAK7E,EAAgB0D,gBAIjB,OAHAuC,OAAOsC,KAAKhC,EAAM3D,WAAW4F,QAAQ,SAACC,GAClClC,EAAM3D,UAAU6F,GAAKa,cAAgByF,EAAOtL,iBAAiBgF,KAE1DxC,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWiG,kBACnB9J,cAAeyL,EAAOzL,gBAG9B,KAAKtD,EAAgBoD,cAUjB,OATGmD,EAAM5D,aACL4D,EAAM5D,WAAWgH,QAAUoF,EAAO7L,YAAYqD,EAAM5D,WAAWqB,IAAI4H,OACnEmD,EAAO7L,YAAYqD,EAAM5D,WAAWqB,IAAI4H,OAAS,EAAIrF,EAAM5D,WAAWqH,eAAiBzD,EAAM5D,WAAWoH,iBACxG9D,OAAOsC,KAAKhC,EAAM3D,WAAW4F,QAAQ,SAACC,GAClClC,EAAM3D,UAAU6F,GAAKkB,QAAUoF,EAAO7L,YAAYuF,GAAKmD,OACvDmD,EAAO7L,YAAYuF,GAAKmD,OAAS,EAAIrF,EAAM3D,UAAU6F,GAAKuB,eAAiBzD,EAAM3D,UAAU6F,GAAKsB,oBAIjG9D,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWkG,gBACnBnK,YAAa6L,EAAO7L,cAU5B,KAAKlD,EAAgBqD,gBAEjB,OADAkD,EAAM7D,UAAY6D,EAAM7D,SAASiL,wBAC1B1H,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWuF,sBACnBrD,qBAAiBtK,EACjBuK,mBAAevK,EACfuE,mBAAevE,EACfmE,iBAAanE,IAGrB,KAAKiB,EAAgBmD,aAGjB,OAFApC,QAAQC,IAAI,kCACZD,QAAQC,IAAI+N,EAAO7L,aACZ+C,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI9G,OAAQ0H,EAAWqG,eACnBjE,gBAAiBwF,EAAO7L,cAGhC,KAAKlD,EAAgBqF,iBACjB,OAAOY,OAAAyF,EAAA,EAAAzF,CAAA,GACAkD,IAGX,QAEI,OADApI,QAAQC,IAAI,aACLuF,IezKfwH,gBDF0E,WAGzE,IAFDxH,EAECsI,UAAAC,OAAA,QAAA/P,IAAA8P,UAAA,GAAAA,UAAA,GAFOH,GACRK,EACCF,UAAAC,OAAA,EAAAD,UAAA,QAAA9P,EACD,OAAQgQ,EAAOrN,MACX,KAAKzB,EAAsB0B,MACvB,OAAOsE,OAAAyF,EAAA,EAAAzF,CAAA,GACAM,EADP,CAEI1G,SAAS,EACTC,MAAOiP,EAAOnN,UAEtB,QAEI,OADAb,QAAQC,IAAI,wBACLuF,ME1BnB/H,EAAAyQ,EAAAC,EAAA,0BAAAC,KAcA,IASa3N,GDJK4N,aAAYT,ICO9BU,IAASC,OAAOnP,EAAAC,EAAAC,cAZkB,SAAAH,GAE9B,OADAW,EAAQC,OAEJX,EAAAC,EAAAC,cAACkP,EAAA,EAAD,CAAU/N,MAAOtB,EAAMsB,OACpBrB,EAAAC,EAAAC,cAACmP,GAAD,QAQK,CAAMhO,MAAOA,KAAWwD,SAASC,eAAe,SH+G1D,kBAAmBtE,WACrBA,UAAU8O,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a4deaf2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty.aa4125d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/boy1.16ed2e05.svg\";","module.exports = __webpack_public_path__ + \"static/media/boy2.1fac4474.svg\";","module.exports = __webpack_public_path__ + \"static/media/boy3.4b8aec94.svg\";","module.exports = __webpack_public_path__ + \"static/media/boy4.fd5ad395.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl1.77c17ebe.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl2.05259861.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl3.5def5f67.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl4.5580008b.svg\";","module.exports = __webpack_public_path__ + \"static/media/cupGold.6347c36c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cupSilver.02942480.svg\";","module.exports = __webpack_public_path__ + \"static/media/cupBronze.68f6fe6c.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudRainIcon.b678b658.svg\";","import { User } from '../models/User';\r\nimport { Friend } from '../models/Friend';\r\nimport { Intents, SignupData, LoginData } from '../reducers/userReducer';\r\n\r\nexport enum UserActionTypes {\r\n    CHANGE_INTENT = \"CHANGE_INTENT\",\r\n    TRY_LOGIN = \"TRY_LOGIN\",\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAILED = \"LOGIN_FAILED\",\r\n    LOGOUT = \"LOGOUT\",\r\n    TRY_SIGNUP = \"TRY_SIGNUP\",\r\n    SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\",\r\n    SIGNUP_FAILED = \"SIGNUP_FAILED\",\r\n    FRIEND_IS_ONLINE = \"FRIEND_IS_ONLINE\",\r\n    FRIEND_IS_OFFLINE = \"FRIEND_IS_OFFLINE\",\r\n    SEARCHING_FOR_GAME = \"SEARCHING_FOR_GAME\",\r\n    START_RANDOM_GAME = \"START_RANDOM_GAME\",\r\n    EXIT_GAME = \"EXIT_GAME\",\r\n    // RECEIVED_CHALLENGE = \"RECEIVED_CHALLENGE\", //TODO: think of the logic for private games\r\n    // SEND_CHALLENGE = \"SEND_CHALLENGE\",\r\n    TRY_JOIN_RANDOM_ROOM = \"\",\r\n    CANCEL_JOIN_RANDOM_ROOM = \"\",\r\n    JOIN_RANDOM_ROOM_SUCCESS = \"\",\r\n    JOIN_RANDOM_ROOM_FAIL = \"\"\r\n}\r\n\r\nexport interface ChangeIntent {\r\n    type: UserActionTypes.CHANGE_INTENT;\r\n    intent: Intents\r\n}\r\n\r\nexport interface UserTryLogin {\r\n    type: UserActionTypes.TRY_LOGIN;\r\n    loginData: LoginData;\r\n}\r\n\r\nexport interface UserLoginSuccess {\r\n    type: UserActionTypes.LOGIN_SUCCESS;\r\n    user: User;\r\n    token: string;\r\n}\r\n\r\nexport interface UserLoginFailed {\r\n    type: UserActionTypes.LOGIN_FAILED;\r\n    error: string;\r\n}\r\n\r\nexport interface UserLogout {\r\n    type: UserActionTypes.LOGOUT;\r\n}\r\n\r\nexport interface TrySignup {\r\n    type: UserActionTypes.TRY_SIGNUP;\r\n    signupData: SignupData\r\n}\r\n\r\nexport interface SignupSuccess {\r\n    type: UserActionTypes.SIGNUP_SUCCESS;\r\n}\r\n\r\nexport interface SignupFailed {\r\n    type: UserActionTypes.SIGNUP_FAILED;\r\n    error: string;\r\n}\r\n\r\nexport interface FriendIsOnline {\r\n    type: UserActionTypes.FRIEND_IS_ONLINE,\r\n    friend: Friend\r\n}\r\n\r\nexport interface FriendIsOffline {\r\n    type: UserActionTypes.FRIEND_IS_OFFLINE,\r\n    friend: Friend\r\n}\r\n\r\nexport interface SearchingForGame {\r\n    type: UserActionTypes.SEARCHING_FOR_GAME\r\n}\r\n\r\nexport interface StartRandomGame {\r\n    type: UserActionTypes.START_RANDOM_GAME\r\n}\r\n\r\nexport interface TryJoinRandomRoom {\r\n    type: UserActionTypes.TRY_JOIN_RANDOM_ROOM\r\n}\r\n\r\nexport interface CancelJoinRandomRoom {\r\n    type: UserActionTypes.CANCEL_JOIN_RANDOM_ROOM\r\n}\r\n\r\nexport interface JoinRandomRoomSuccess {\r\n    type: UserActionTypes.JOIN_RANDOM_ROOM_SUCCESS\r\n}\r\n\r\nexport interface JoinRandomRoomFail {\r\n    type: UserActionTypes.JOIN_RANDOM_ROOM_FAIL\r\n}\r\n\r\nexport interface ExitGame {\r\n    type: UserActionTypes.EXIT_GAME;\r\n}\r\n\r\n\r\n\r\nexport type UserActions = ChangeIntent | UserTryLogin | UserLoginSuccess | UserLoginFailed | UserLogout| TrySignup | SignupSuccess | SignupFailed |\r\n FriendIsOnline | FriendIsOffline | SearchingForGame| StartRandomGame | TryJoinRandomRoom | CancelJoinRandomRoom | JoinRandomRoomSuccess | JoinRandomRoomFail |\r\n ExitGame // | next action\r\n","import { Reducer } from 'redux';\r\nimport { User } from '../models/User';\r\nimport { UserActionTypes, UserActions } from '../actions/UserActions'\r\n\r\nexport enum PlayerStatus {\r\n    IDLE = \"IDLE\",\r\n    CHALLENGED = \"CHALLENGED\",\r\n    PLAYING = \"PLAYING\",\r\n    SEARCHING_FOR_RANDOM_GAME = \"SEARCHING_FOR_RANDOM_GAME\",\r\n    WAITING = \"WAITING\",\r\n    OFFLINE = \"OFFLINE\",\r\n    RECONNECTING = \"RECONNECTING\",\r\n}\r\n\r\nexport enum Intents {\r\n    LOGIN = \"LOGIN\",\r\n    SIGNUP = \"SIGNUP\"\r\n}\r\n\r\nexport interface SignupData {\r\n    email: string,\r\n    password: string,\r\n    nickName: string,\r\n    avatar: string\r\n}\r\n\r\nexport interface LoginData {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport interface UserState {\r\n    user: User | undefined,\r\n    intent: Intents,\r\n    signupData: SignupData,\r\n    loginData: LoginData,\r\n    token: string | undefined,\r\n    status: PlayerStatus,\r\n    challengeRoomId: string | undefined,\r\n    isLoading: Boolean,\r\n    isError: Boolean,\r\n    error: string,\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nconst initialUserState: UserState = {\r\n    user: undefined,\r\n    intent: Intents.LOGIN,\r\n    signupData: {\r\n        email: '',\r\n        password: '',\r\n        nickName: '',\r\n        avatar: 'empty'\r\n    },\r\n    loginData: {\r\n        email: '',\r\n        password: ''\r\n    },\r\n    token: undefined,\r\n    status: PlayerStatus.IDLE,\r\n    challengeRoomId: undefined,\r\n    isLoading: false,\r\n    isError: false,\r\n    error: '',\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\nexport const userReducer: Reducer<UserState, UserActions> = (\r\n    state = initialUserState,\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case UserActionTypes.CHANGE_INTENT: {\r\n            return {\r\n                ...state,\r\n                intent: Intents[action.intent]\r\n            }\r\n        }\r\n        case UserActionTypes.TRY_LOGIN: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n            }\r\n        }\r\n        case UserActionTypes.LOGIN_FAILED: {\r\n            return{\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                error: action.error,\r\n            }\r\n        }\r\n        case UserActionTypes.LOGIN_SUCCESS: {\r\n            console.log(\"Login was succ\")\r\n            return {\r\n                ...state,\r\n                loginData: initialUserState.loginData,\r\n                isLoading: false,\r\n                isError: false,\r\n                user: action.user,\r\n                token: action.token,\r\n                error: ''\r\n            }\r\n        }\r\n        case UserActionTypes.TRY_SIGNUP: {\r\n            return {\r\n                ...state,\r\n                signupData: action.signupData,\r\n                isLoading: true\r\n            }\r\n        }\r\n        case UserActionTypes.SIGNUP_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                error: action.error\r\n            }\r\n        }\r\n        case UserActionTypes.SIGNUP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                signupData: initialUserState.signupData,\r\n                isLoading: false,\r\n                isError: false,\r\n                error: ''\r\n            }\r\n        }\r\n        case UserActionTypes.LOGOUT: {\r\n            return {\r\n                ...state,\r\n                user: undefined,\r\n                token: ''\r\n            }\r\n        }\r\n        case UserActionTypes.SEARCHING_FOR_GAME: {\r\n            return {\r\n                ...state,\r\n                status: PlayerStatus.SEARCHING_FOR_RANDOM_GAME\r\n            }\r\n        }\r\n        case UserActionTypes.START_RANDOM_GAME: {\r\n            return {\r\n                ...state,\r\n                status: PlayerStatus.PLAYING\r\n            }\r\n        }\r\n        case UserActionTypes.EXIT_GAME: {\r\n            return {\r\n                ...state,\r\n                status: PlayerStatus.IDLE\r\n            }\r\n        }\r\n        default: {\r\n            console.log(\"Defaulted\");\r\n            return state;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction Button(props: any) {\r\n        return (\r\n            <button onClick={props.onClick}>{props.btnName}</button>\r\n        )\r\n}\r\n\r\nexport default Button","import { MultipleAnswerQuestion, RangeQuestion } from '../models/Question';\r\nimport { Player } from '../models/Player';\r\nimport { GameInfo, PlayerInfo } from '../reducers/gameReducer';\r\n\r\nexport enum GameActionTypes {\r\n    REQUEST_RANDOM_GAME_SEARCH  = \"REQUEST_RANDOM_GAME_SEARCH\",\r\n    CANCEL_RANDOM_GAME_SEARCH = \"CANCEL_RANDOM_GAME_SEARCH\",\r\n    CREATE_RANDOM_GAME = \"CREATE_RANDOM_GAME\",\r\n    START_RANDOM_GAME = \"START_RANDOM_GAME\",\r\n    RECEIVED_QUESTION = \"RECEIVE_QUESTION\",\r\n    SHOW_QUESTION = \"SHOW_QUESTION\",\r\n    SEND_ANSWER = \"SEND_ANSWER\",\r\n    ANSWER_RECEIVED = \"ANSWER_RECEIVED\",\r\n    RESOLVE_ROUND = \"RESOLVE_ROUND\",\r\n    // CORRECT_ANSWER = \"CORRECT_ANSWER\",\r\n    // WRONG_ANSWER = \"WRONG_ANSWER\",\r\n    START_NEW_ROUND = \"START_NEW_ROUND\",\r\n    RESOLVE_GAME = \"RESOLVE_GAME\",\r\n    // GAME_OVER = \"GAME_OVER\",\r\n    RESET_GAME_STATE = \"RESET_GAME_STATE\"\r\n}\r\n\r\nexport interface RequestRandomGameSearch {\r\n    type: GameActionTypes.REQUEST_RANDOM_GAME_SEARCH;\r\n}\r\n\r\nexport interface CancelRandomGameSearch {\r\n    type: GameActionTypes.CANCEL_RANDOM_GAME_SEARCH;\r\n}\r\n\r\nexport interface CreateRandomGame {\r\n    type: GameActionTypes.CREATE_RANDOM_GAME;\r\n    roomId: number;\r\n    gameInfo: GameInfo; \r\n    playerInfo: PlayerInfo;\r\n    opponents: Array<Player>;\r\n}\r\n\r\nexport interface StartRandomGame {\r\n    type: GameActionTypes.START_RANDOM_GAME;\r\n}\r\n\r\nexport interface ReceivedQuestion {\r\n    type: GameActionTypes.RECEIVED_QUESTION;\r\n    question: MultipleAnswerQuestion | RangeQuestion;\r\n}\r\n\r\nexport interface ShowQuestion {\r\n    type: GameActionTypes.SHOW_QUESTION;\r\n}\r\n\r\nexport interface SendAnswer {\r\n    type: GameActionTypes.SEND_ANSWER;\r\n    answer: string;\r\n}\r\n\r\nexport interface AnswerReceived {\r\n    type: GameActionTypes.ANSWER_RECEIVED;\r\n    correctAnswer: string,\r\n    opponentsAnswers: any;\r\n}\r\n\r\nexport interface ResolveRound {\r\n    type: GameActionTypes.RESOLVE_ROUND;\r\n    resolveData: any;\r\n}\r\n\r\n// export interface WrongAnswer {\r\n//     type: GameActionTypes.WRONG_ANSWER;\r\n//     opponentsAnswers: any;\r\n// }\r\n\r\nexport interface StartNewRound {\r\n    type: GameActionTypes.START_NEW_ROUND;\r\n}\r\n\r\nexport interface ResolveGame {\r\n    type: GameActionTypes.RESOLVE_GAME;\r\n    resolveData: any;\r\n}\r\n\r\nexport interface ResetGameState {\r\n    type: GameActionTypes.RESET_GAME_STATE\r\n}\r\n\r\n\r\nexport type GameActions = RequestRandomGameSearch | CancelRandomGameSearch | CreateRandomGame | StartRandomGame | ReceivedQuestion\r\n | ShowQuestion | SendAnswer | AnswerReceived | ResolveRound | StartNewRound | ResolveGame | ResetGameState // | next action\r\n","export enum GeneralAppActionTypes {\r\n    ERROR = \"ERROR\"\r\n}\r\n\r\nexport interface Error {\r\n    type: GeneralAppActionTypes.ERROR;\r\n    message: string;\r\n}\r\n\r\nexport type GeneralAppActions = Error\r\n\r\n","import {store} from '../index';\r\nimport io from 'socket.io-client';\r\nimport { UserActionTypes } from '../actions/UserActions';\r\nimport { User } from '../models/User';\r\nimport { GameActionTypes } from '../actions/GameActions';\r\nimport { GeneralAppActionTypes } from '../actions/GeneralAppActions';\r\nlet connectionEndPoint = 'localhost:3001';\r\n\r\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n    connectionEndPoint = 'http://192.168.1.138:3001/';\r\n}\r\nvar socket: any;\r\n\r\nexport const service: any = {\r\n    init: () => {\r\n        console.log(\"Initing\")\r\n        let token = localStorage.getItem('token');\r\n        socket = io(connectionEndPoint, {query: token ? `auth_token=${token}` : '', reconnection: true});\r\n        console.log(socket)\r\n        if(socket.disconnected===false) {\r\n            store.dispatch({\r\n                type: GeneralAppActionTypes.ERROR,\r\n                message: \"It seems you have opened the game on another device or tab of your browser. Only one connection is allowed at a time. Please close the other window id you want to continue...\"\r\n            })\r\n        } else {\r\n            attachSocketEventListeners();\r\n            console.log(\"Socket initialized\");\r\n            service.getUser();\r\n        }\r\n        console.log(\"Socket initialized\");\r\n    },\r\n    setIntent: (e: any) => {\r\n        console.log(\"Target is\")\r\n        console.log(e.target)\r\n        store.dispatch({\r\n            type:UserActionTypes.CHANGE_INTENT,\r\n            intent: e.target.id ? e.target.id : e.target.parentNode.id\r\n        })\r\n    },\r\n    getUser: () => {\r\n        console.log(\"Trying to get user\")\r\n        socket.emit('get user')\r\n        store.dispatch({\r\n            type:UserActionTypes.TRY_LOGIN\r\n        })\r\n    },\r\n    tryLogin: (email: string, password: string) => {\r\n        store.dispatch({\r\n            type:UserActionTypes.TRY_LOGIN,\r\n            loginData: {email, password}\r\n        })\r\n        socket.emit(\"login\", {email: email, password: password});\r\n    },\r\n    trySignup: (email: string, password: string, nickName: string, avatar: string) => {\r\n        store.dispatch({\r\n            type:UserActionTypes.TRY_SIGNUP,\r\n            signupData: {\r\n                email, password, nickName, avatar\r\n            }\r\n        })\r\n        socket.emit(\"signup\", {email: email, password: password, nickName: nickName, avatar: avatar});\r\n    },\r\n    //game services\r\n    searchForRandomGame: () => {\r\n        console.log(\"Will search for random game\")\r\n        console.log(socket)\r\n        socket.emit(\"join random game\")\r\n        store.dispatch({\r\n            type: UserActionTypes.SEARCHING_FOR_GAME\r\n        })\r\n        store.dispatch({\r\n            type: GameActionTypes.REQUEST_RANDOM_GAME_SEARCH\r\n        })\r\n    },\r\n    getQuestion: () => {\r\n        console.log(\"Getting question\");\r\n        socket.emit(\"get question\");\r\n    },\r\n    sendMultipleAnswer: (event: any) => {\r\n        console.log(event.target.id);\r\n        store.dispatch({\r\n            type: GameActionTypes.SEND_ANSWER,\r\n            answer: event.target.id\r\n        })\r\n        socket.emit('set multiple answer', {answer: event.target.id});\r\n    },\r\n    sendRangedAnswer: (event: any) => {\r\n        event.preventDefault();\r\n        let answer = (document.getElementById(\"ranged-question-answer\") as HTMLInputElement).value;\r\n        store.dispatch({\r\n            type: GameActionTypes.SEND_ANSWER,\r\n            answer: event.target.id\r\n        })\r\n        socket.emit('set ranged answer', {answer: answer});\r\n    },\r\n    endGame: () => {\r\n        console.log(\"Ending game\");\r\n        store.dispatch({\r\n            type: UserActionTypes.EXIT_GAME\r\n        });\r\n        store.dispatch({\r\n            type: GameActionTypes.RESET_GAME_STATE\r\n        })\r\n    }\r\n}\r\n\r\nfunction attachSocketEventListeners() {\r\n    socket.on(\"login success\", (data: any) => {\r\n        localStorage.setItem(\"token\", data.token);\r\n        socket = io.connect(connectionEndPoint, {query: `auth_token=${data.token}`, reconnection: true});\r\n        attachSocketEventListeners();\r\n        store.dispatch({\r\n            type: UserActionTypes.LOGIN_SUCCESS,\r\n            user: data.user,\r\n            token: data.token\r\n        });\r\n    })\r\n    \r\n    socket.on(\"login failed\", (data: any) => {\r\n        console.log(\"error\")\r\n        console.log(data.reason)\r\n        store.dispatch({\r\n            type: UserActionTypes.LOGIN_FAILED,\r\n            error: data.reason\r\n        });\r\n    });\r\n    \r\n    socket.on(\"user\", (user: User) => {\r\n        console.log(\"Got user\")\r\n        console.log(user)\r\n        user ? \r\n        store.dispatch({\r\n          user: user,\r\n          type: UserActionTypes.LOGIN_SUCCESS,\r\n        }) :\r\n        store.dispatch({\r\n          type: UserActionTypes.LOGIN_FAILED\r\n        })\r\n      });\r\n    \r\n      socket.on(\"error\", (data: any) => {\r\n        console.log(data);\r\n      });\r\n      //if the login succeeds, reconnect the socket in order to add the token to it. \r\n    \r\n    socket.on(\"signup failed\", (data: any) => {\r\n        console.log(\"error\")\r\n        console.log(data.reason)\r\n        store.dispatch({\r\n            type: UserActionTypes.SIGNUP_FAILED,\r\n            error: data.reason\r\n        });\r\n    });\r\n    \r\n    socket.on(\"signup success\", (data: any) => {\r\n        console.log(\"Signup was successfull\")\r\n        store.dispatch({\r\n            type: UserActionTypes.SIGNUP_SUCCESS\r\n        });\r\n    })\r\n    \r\n    socket.on(\"logout success\", () => {\r\n        socket = io.connect(connectionEndPoint);\r\n        attachSocketEventListeners();\r\n        store.dispatch({\r\n          type: UserActionTypes.LOGOUT\r\n        })\r\n    })\r\n    // GAME EVENTS\r\n    socket.on(\"random game created\", (data: any) => {\r\n        console.log(\"Game was created\")\r\n        console.log(data)\r\n        store.dispatch({\r\n            type: GameActionTypes.CREATE_RANDOM_GAME,\r\n            roomId: data.roomId,\r\n            gameInfo: data.gameInfo,\r\n            playerInfo: data.playerInfo,\r\n            opponents: data.opponents\r\n        });\r\n    });\r\n    \r\n    socket.on(\"game started\", () => {\r\n        console.log(\"Game started\");\r\n        store.dispatch({\r\n            type: GameActionTypes.START_RANDOM_GAME\r\n        });\r\n    });\r\n    \r\n    socket.on(\"new question\", (data:any) => {\r\n        console.log(\"QUestion is\");\r\n        console.log(data.question);\r\n        store.dispatch({\r\n            type: GameActionTypes.RECEIVED_QUESTION,\r\n            question: data.question\r\n        });\r\n        socket.emit(\"question received\");\r\n    })\r\n    \r\n    socket.on(\"show question\", () => {\r\n        store.dispatch({\r\n            type: GameActionTypes.SHOW_QUESTION\r\n        });\r\n    })\r\n\r\n    socket.on(\"resolve game\", (resolveData: any) => {\r\n        console.log(\"The resolve game data is\")\r\n        console.log(resolveData)\r\n        store.dispatch({\r\n            type: GameActionTypes.RESOLVE_GAME,\r\n            resolveData: resolveData\r\n        })\r\n    })\r\n    \r\n    // socket.on(\"game over\", () => {\r\n    //     console.log(\"Game is over\")\r\n    //     store.dispatch({\r\n    //         type: GameActionTypes.GAME_OVER\r\n    //     });\r\n    // })\r\n\r\n    socket.on('resolve round', (data: any) => {\r\n        console.log(\"Should resolve round now\")\r\n        console.log(data)\r\n        store.dispatch({\r\n            type: GameActionTypes.RESOLVE_ROUND,\r\n            resolveData: data\r\n        });\r\n    })\r\n    \r\n    socket.on(\"start new round\", () => {\r\n        console.log(\"Starting new round\")\r\n        store.dispatch({\r\n            type: GameActionTypes.START_NEW_ROUND\r\n        });\r\n    })\r\n\r\n    socket.on(\"show answer\", (data: any) => {\r\n        console.log(\"The answer is\")\r\n        console.log(data.correctAnswer)\r\n        console.log(\"Your answer is\");\r\n        console.log(store.getState().gameState)\r\n        console.log(\"Other players' answers\")\r\n        console.log(data.opponentsAnswers)\r\n        // if(data.answer === store.getState().gameState.currentAnswer) {\r\n            // console.log(\"Right answer\")\r\n            store.dispatch({\r\n                type: GameActionTypes.ANSWER_RECEIVED,\r\n                correctAnswer: data.correctAnswer,\r\n                opponentsAnswers: data.opponentsAnswers\r\n            })\r\n        // } else {\r\n        //     console.log(\"Wrong answer\")\r\n        //     store.dispatch({\r\n        //         type: GameActionTypes.WRONG_ANSWER,\r\n        //         playersAnswers: data.playersAnswers\r\n        //     })\r\n        // }\r\n    }) \r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import { socket } from '../App';\r\nimport { UserState } from '../reducers/userReducer';\r\nimport { AppState } from '../store/Store';\r\nimport Button from './shared/Button';\r\nimport { service } from '../services/socket-service';\r\nimport { GameState } from '../reducers/gameReducer';\r\n\r\ninterface AppProps {\r\n  dispatch: any,\r\n  userState: UserState,\r\n  gameState: GameState\r\n}\r\n\r\nclass Menu extends React.Component<AppProps> {\r\n\r\n  render() {\r\n   \r\n    let randomBtnProps = {\r\n      btnName: \"Random Game\",\r\n      onClick: service.searchForRandomGame\r\n    }\r\n    let friendBtnProps = {\r\n      btnName: \"Challenge Friend\",\r\n      onClick: service.challengeFriend\r\n    }\r\n    \r\n    return(\r\n      <div className=\"menu-section\">\r\n        <div>\r\n          <Button {...randomBtnProps} />\r\n          <Button {...friendBtnProps} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Grab the characters from the store and make them available on props\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    userState: store.userState,\r\n    gameState: store.gameState\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Menu);\r\n","import React from 'react';\r\nimport { AppState } from '../../store/Store';\r\nimport { connect } from 'react-redux';\r\nimport { service } from '../../services/socket-service';\r\n\r\nclass Login extends React.Component<any, any> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            email: this.props.userState.loginData.email,\r\n            password: ''\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        let name: any = event.target && event.target.name;\r\n        this.setState({\r\n            [name]:event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(event : any) {\r\n        event.preventDefault();\r\n        service.tryLogin(this.state.email, this.state.password)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <h2>Login</h2>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='email'>Email</label>\r\n                    <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} /> \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='password'>Password</label>\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                </div>\r\n                {this.props.userState.isError && <p>{this.props.userState.error}</p>}\r\n                <button type=\"submit\" value=\"Submit\">Login</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n      userState: store.userState\r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps)(Login);\r\n","import React from 'react';\r\n\r\ninterface AvatarImageProps {\r\n    value: string,\r\n    src: string,\r\n    onClick: any\r\n}\r\n\r\nfunction AvatarImage(props: AvatarImageProps) {\r\n    return (\r\n        <img className=\"avatar-image\" id={props.value} src={props.src} onClick={props.onClick} alt={`avatar-${props.value}`}></img>\r\n    )\r\n}\r\n\r\nexport default AvatarImage","import { Reducer } from 'redux';\r\n// import { Player } from '../models/Player';\r\nimport { MultipleAnswerQuestion, RangeQuestion } from '../models/Question'\r\nimport { GameActionTypes, GameActions } from '../actions/GameActions'\r\n\r\nexport enum GameStatus {\r\n    NOT_PLAYING = \"NOT_PLAYING\",\r\n    SEARCHING_FOR_GAME = \"SEARCHING_FOR_GAME\",\r\n    WAITING_FOR_PLAYERS = \"WAITING_FOR_PLAYERS\",\r\n    STARTING = \"STARTING\",\r\n    RUNNING = \"RUNNING\",\r\n    ANSWER_SUBMITTED = \"ANSWER_SUBMITTED\",\r\n    WAITING_FOR_ANSWER = \"WAITING_FOR_ANSWER\",\r\n    RESOLVING_ANSWERS = \"RESOLVING_ANSWERS\",\r\n    RESOLVING_ROUND = \"RESOLVING_ROUND\",\r\n    GETTING_NEXT_QUESTION = \"GETTING_NEXT_QUESTION\",\r\n    RESOLVING_GAME = \"RESOLVING_GAME\",\r\n    GAME_OVER = \"GAME_OVER\"\r\n}\r\n\r\nexport interface GameInfo {\r\n    questionsCount: number,\r\n    currentQuestionNumber: number,\r\n}\r\n\r\nexport interface PlayerInfo {\r\n    // answers: []\r\n    avatar: string,\r\n    health: number,\r\n    id: string,\r\n    nickName: string,\r\n    correctAnswers: number,\r\n    wrongAnswers: number\r\n}\r\n\r\nexport interface GameState {\r\n    roomId: Number | null,\r\n    status: GameStatus,\r\n    gameInfo: GameInfo | undefined,\r\n    playerInfo: PlayerInfo | undefined,\r\n    currentQuestion: MultipleAnswerQuestion | RangeQuestion | undefined,\r\n    currentAnswer: string | undefined,\r\n    correctAnswer: string | undefined,\r\n    opponents: any,\r\n    resolveData: any,\r\n    resolveGameData: any,\r\n    isLoading: Boolean,\r\n    isError: Boolean,\r\n    error: string | undefined\r\n}\r\n\r\nconst initialGameState: GameState = {\r\n    roomId: null,\r\n    status: GameStatus.NOT_PLAYING,\r\n    gameInfo: undefined,\r\n    playerInfo: undefined,\r\n    currentQuestion: undefined,\r\n    currentAnswer: undefined,\r\n    correctAnswer: undefined,\r\n    opponents: undefined,\r\n    resolveData: undefined,\r\n    resolveGameData: undefined,\r\n    isLoading: false,\r\n    isError: false,\r\n    error: undefined\r\n}\r\n\r\nexport const gameReducer: Reducer<GameState, GameActions> = (\r\n    state = initialGameState,\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case GameActionTypes.REQUEST_RANDOM_GAME_SEARCH: {\r\n            console.log(\"Request random game search\")\r\n            return {\r\n                ...state,\r\n                status: GameStatus.SEARCHING_FOR_GAME,\r\n                isLoading: true\r\n            }\r\n        }\r\n        case GameActionTypes.CANCEL_RANDOM_GAME_SEARCH: {\r\n            return {\r\n                ...state,\r\n                status: GameStatus.NOT_PLAYING,\r\n                isLoading: false\r\n            }\r\n        }\r\n        case GameActionTypes.CREATE_RANDOM_GAME: {\r\n            return {\r\n                ...state,\r\n                status: GameStatus.STARTING,\r\n                isLoading: false,\r\n                opponents: action.opponents,\r\n                gameInfo: action.gameInfo,\r\n                playerInfo: action.playerInfo,\r\n                roomId: action.roomId\r\n            }\r\n        }\r\n        case GameActionTypes.START_RANDOM_GAME: {\r\n            return {\r\n                ...state,\r\n                status: GameStatus.RUNNING\r\n            }\r\n        }\r\n        case GameActionTypes.RECEIVED_QUESTION: {\r\n            return {\r\n                ...state,\r\n                currentQuestion: action.question,\r\n                status: GameStatus.WAITING_FOR_ANSWER\r\n            }\r\n        }\r\n        case GameActionTypes.SHOW_QUESTION: {\r\n            return {\r\n                ...state,\r\n                status: GameStatus.WAITING_FOR_ANSWER\r\n            }\r\n        }\r\n        case GameActionTypes.SEND_ANSWER: {\r\n            return {\r\n                ...state,\r\n                status: GameStatus.ANSWER_SUBMITTED,\r\n                currentAnswer: action.answer\r\n            }\r\n        }\r\n        case GameActionTypes.ANSWER_RECEIVED: {\r\n            Object.keys(state.opponents).forEach((key) => {\r\n                state.opponents[key].currentAnswer = action.opponentsAnswers[key];\r\n            });\r\n            return {\r\n                ...state,\r\n                status: GameStatus.RESOLVING_ANSWERS,\r\n                correctAnswer: action.correctAnswer,\r\n            }\r\n        }\r\n        case GameActionTypes.RESOLVE_ROUND: {\r\n            if(state.playerInfo) {\r\n                state.playerInfo.health -= action.resolveData[state.playerInfo.id].damage;\r\n                action.resolveData[state.playerInfo.id].damage > 0 ? state.playerInfo.wrongAnswers++ : state.playerInfo.correctAnswers++;\r\n                Object.keys(state.opponents).forEach((key) => {\r\n                    state.opponents[key].health -= action.resolveData[key].damage;\r\n                    action.resolveData[key].damage > 0 ? state.opponents[key].wrongAnswers++ : state.opponents[key].correctAnswers++;\r\n                })\r\n            }\r\n            \r\n            return {\r\n                ...state,\r\n                status: GameStatus.RESOLVING_ROUND,\r\n                resolveData: action.resolveData\r\n            }\r\n        }\r\n        // case GameActionTypes.WRONG_ANSWER: {\r\n        //     return {\r\n        //         ...state,\r\n        //         status: GameStatus.RESOLVING_ANSWERS,\r\n        //         correctAnswer: false\r\n        //     }\r\n        // }\r\n        case GameActionTypes.START_NEW_ROUND: {\r\n            state.gameInfo && state.gameInfo.currentQuestionNumber++;\r\n            return {\r\n                ...state,\r\n                status: GameStatus.GETTING_NEXT_QUESTION,\r\n                currentQuestion: undefined,\r\n                currentAnswer: undefined,\r\n                correctAnswer: undefined,\r\n                resolveData: undefined\r\n            }\r\n        }\r\n        case GameActionTypes.RESOLVE_GAME: {\r\n            console.log(\"Resolve game action dispatched\")\r\n            console.log(action.resolveData)\r\n            return {\r\n                ...state,\r\n                status: GameStatus.RESOLVING_GAME,\r\n                resolveGameData: action.resolveData\r\n            }\r\n        }\r\n        case GameActionTypes.RESET_GAME_STATE: {\r\n            return {\r\n                ...initialGameState\r\n            }\r\n        }\r\n        default: {\r\n            console.log(\"Defaulted\");\r\n            return state;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { AppState } from '../../store/Store';\r\nimport { connect } from 'react-redux';\r\nimport { service } from '../../services/socket-service';\r\nimport AvatarImage from './AvatarImage';\r\nimport boy1 from '../../images/boy1.svg';\r\nimport boy2 from '../../images/boy2.svg';\r\nimport boy3 from '../../images/boy3.svg';\r\nimport boy4 from '../../images/boy4.svg';\r\nimport girl1 from '../../images/girl1.svg';\r\nimport girl2 from '../../images/girl2.svg';\r\nimport girl3 from '../../images/girl3.svg';\r\nimport girl4 from '../../images/girl4.svg';\r\nimport empty from '../../images/empty.svg';\r\nimport { UserState } from '../../reducers/userReducer';\r\n\r\nlet avatars: any = {\r\n    boy1: boy1,\r\n    boy2: boy2,\r\n    boy3: boy3,\r\n    boy4: boy4,\r\n    girl1: girl1,\r\n    girl2: girl2,\r\n    girl3: girl3,\r\n    girl4: girl4,\r\n    empty: empty\r\n}\r\n\r\ninterface UserProps {\r\n    userState: UserState;\r\n}\r\n\r\ninterface SignupProps {\r\n    email: string,\r\n    password: string,\r\n    nickName: string,\r\n    avatar: string,\r\n    showAvatars: boolean\r\n}\r\n\r\nclass Signup extends React.Component<UserProps, any> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            email: this.props.userState.signupData.email,\r\n            password: this.props.userState.signupData.password,\r\n            nickName: this.props.userState.signupData.nickName,\r\n            avatar:this.props.userState.signupData.avatar,\r\n            showAvatars: false\r\n        };\r\n        this.closeAvatars = this.closeAvatars.bind(this);\r\n        this.handleShowAvatars = this.handleShowAvatars.bind(this);\r\n        this.handleSelectAvatar = this.handleSelectAvatar.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    closeAvatars() {\r\n        if (this.state.showAvatars)\r\n            this.setState({\r\n                showAvatars: false\r\n            })\r\n    }\r\n\r\n    handleShowAvatars() {\r\n        this.setState({\r\n            showAvatars: !this.state.showAvatars\r\n        })\r\n    }\r\n\r\n    handleSelectAvatar(event:any) {\r\n        this.setState({\r\n            avatar: event.target.id\r\n        })\r\n        this.handleShowAvatars();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        let name: string = event.target && event.target.name;\r\n        let value: string = event.target.value;\r\n        this.setState({\r\n            [name]:value\r\n        })\r\n    }\r\n\r\n    handleSubmit(event : any) {\r\n        event.preventDefault();\r\n        service.trySignup(this.state.email, this.state.password, this.state.nickName, this.state.avatar);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"Signup state is\")\r\n        console.log(this.props.userState)\r\n        let avatarImages:any = [];\r\n        Object.keys(avatars).forEach((key) => {\r\n            let avatarProps = {\r\n                key: key,\r\n                value: key,\r\n                src: avatars[key],\r\n                onClick: this.handleSelectAvatar\r\n            }\r\n            avatarImages.push(avatarProps);\r\n        })\r\n        return (\r\n            <form onSubmit={this.handleSubmit} onClick={this.closeAvatars}>\r\n                <h2>Signup</h2>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='email'>Email</label>\r\n                    <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} /> \r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='password'>Password</label>\r\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='nickName'>Nickname</label>\r\n                    <input type=\"text\" name=\"nickName\" value={this.state.nickName} onChange={this.handleChange} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor='avatar'>Avatar</label>\r\n                    <img className=\"avatar-selector\" src={avatars[this.state.avatar]} alt=\"avatar-selector\" onClick={this.handleShowAvatars}></img>\r\n                    <div className=\"avatars-container\">\r\n                        {this.state.showAvatars && avatarImages.map((image: any) => {\r\n                            return <AvatarImage {...image} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                {this.props.userState.isError && <p>{this.props.userState.error}</p>}\r\n                <button type=\"submit\" value=\"Submit\">Signup</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n    return {\r\n      userState: store.userState\r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps)(Signup);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UserState } from '../reducers/userReducer';\r\nimport { AppState } from '../store/Store';\r\nimport Login from './authentication/Login';\r\nimport Signup from './authentication/Signup';\r\nimport { service } from '../services/socket-service';\r\nimport { Intents } from '../reducers/userReducer';\r\n\r\n\r\ninterface UserProps {\r\n  userState: UserState\r\n}\r\n\r\nclass LoginSignup extends React.Component<UserProps> {\r\n\r\n  public render() {\r\n    return (\r\n        <div className=\"auth-section\">\r\n            <div className=\"auth-nav\">\r\n              <div className={this.props.userState.intent === Intents.LOGIN ? \"auth-tab active\" : \"auth-tab inactive\"} \r\n                  onClick={service.setIntent}\r\n                  id=\"LOGIN\">\r\n                <h2>\r\n                  Login\r\n                </h2>\r\n              </div>\r\n              <div className={this.props.userState.intent === Intents.SIGNUP ? \"auth-tab active\" : \"auth-tab inactive\"}\r\n                   onClick={service.setIntent}\r\n                   id=\"SIGNUP\">\r\n                <h2>\r\n                  Signup\r\n                </h2>\r\n              </div>\r\n            </div>\r\n            <div className=\"auth-form\">\r\n              {this.props.userState.intent === Intents.SIGNUP ? <Signup /> : <Login />}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    userState: store.userState\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LoginSignup);\r\n","import React from 'react';\r\nimport boy1 from '../../images/boy1.svg';\r\nimport boy2 from '../../images/boy2.svg';\r\nimport boy3 from '../../images/boy3.svg';\r\nimport boy4 from '../../images/boy4.svg';\r\nimport girl1 from '../../images/girl1.svg';\r\nimport girl2 from '../../images/girl2.svg';\r\nimport girl3 from '../../images/girl3.svg';\r\nimport girl4 from '../../images/girl4.svg';\r\nimport empty from '../../images/empty.svg';\r\n\r\nlet avatars: any = {\r\n    boy1: boy1,\r\n    boy2: boy2,\r\n    boy3: boy3,\r\n    boy4: boy4,\r\n    girl1: girl1,\r\n    girl2: girl2,\r\n    girl3: girl3,\r\n    girl4: girl4,\r\n    empty: empty\r\n}\r\n\r\ninterface AvatarProps {\r\n    class: string,\r\n    nickName: string,\r\n    avatar?: string,\r\n    health: number,\r\n    damaged?: boolean,\r\n    correctAnswers: number,\r\n    wrongAnswers: number\r\n}\r\n\r\nfunction PlayerAvatar(props: AvatarProps) {\r\n    const healthStyle = {\r\n        width: props.health + '%'\r\n    }\r\n\r\n    return (\r\n        <div className=\"player-avatar-container \">\r\n            <img className=\"player-avatar\" alt=\"avatar\" src={props.avatar ? avatars[props.avatar] : avatars[empty]}></img>\r\n            <div className={\"player-stats \" + props.class}>\r\n                <div className=\"player-name\">{props.nickName}</div>\r\n                <div className=\"player-health-container\">\r\n                    <div className={`player-health ${props.class} ${props.damaged ? ' damaged' : ''}`} style={healthStyle}></div>\r\n                </div>\r\n                <div className=\"player-answers-container\">\r\n                    <span className=\"block correct\">Correct: {props.correctAnswers}</span>\r\n                    <span className=\"block wrong\">Wrong: {props.wrongAnswers}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerAvatar","import React from 'react';\r\nimport { service } from '../../services/socket-service';\r\n\r\ninterface AnswerProps {\r\n    id: string, \r\n    active: boolean;\r\n    answer: string | undefined | null;\r\n    correctAnswer: string | undefined;\r\n    question: any;\r\n    opponents: any;\r\n}\r\n\r\nfunction AnswerComponent(props: AnswerProps) {\r\n    let elementClass: string = 'answer-container';\r\n    \r\n    if (!props.active)\r\n        elementClass += ' disabled';\r\n    if(props.answer && props.answer === props.id) {\r\n        elementClass += ' own-answer';\r\n    }\r\n    if(props.correctAnswer === props.id)\r\n        elementClass += ' correct-answer';\r\n    if(props && props.opponents) {\r\n        Object.keys(props.opponents).forEach((key, index) => {\r\n            console.log(props, props.id)\r\n            if(props.opponents[key].currentAnswer === props.id)\r\n                elementClass += ` opponent${index + 1}`\r\n        })\r\n    }\r\n    return (\r\n       <div className={elementClass} id={props.id} onClick={props.active ? service.sendMultipleAnswer : void(0)}>\r\n        {props.question[props.id]}\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default AnswerComponent","import React from 'react';\r\nimport AnswerComponent from './AnswerComponent';\r\n\r\nexport interface QuestionProps {\r\n    active: boolean;\r\n    waitingForAnswers: boolean;\r\n    answer: string | undefined | null;\r\n    correctAnswer: string | undefined;\r\n    question: any;\r\n    opponents: any;\r\n}\r\n\r\nfunction MultipleAnswerQuestionComponent(props: QuestionProps) {\r\n    console.log(\"Rendering question\")\r\n    console.log(\"Correct answer\", props.correctAnswer);\r\n    let resolveAnswer: boolean;\r\n    let correctAnswer: boolean;\r\n    props.answer && props.correctAnswer ? resolveAnswer = true : resolveAnswer = false;\r\n    props.answer === props.correctAnswer ? correctAnswer = true : correctAnswer = false;\r\n        return (\r\n            <div className=\"question-container\">\r\n                <div className=\"question-body\">\r\n                    <p>{props.question.body}</p>\r\n                </div>\r\n                <div><div className=\"answer-name\">A</div><AnswerComponent {...Object.assign({id:'answerA'}, props)}/></div>\r\n                <div><div className=\"answer-name\">B</div><AnswerComponent {...Object.assign({id:'answerB'}, props)}/></div>\r\n                <div><div className=\"answer-name\">C</div><AnswerComponent {...Object.assign({id:'answerC'}, props)}/></div>\r\n                <div><div className=\"answer-name\">D</div><AnswerComponent {...Object.assign({id:'answerD'}, props)}/></div>\r\n                {resolveAnswer && <span className={correctAnswer ? \"resolved correct\" : \"resolved wrong\"}>{correctAnswer ? \"Correct Answer\" : \"Wrong Answer\"}</span>}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default MultipleAnswerQuestionComponent","import React from 'react';\r\nimport { service } from '../../services/socket-service';\r\n\r\nexport interface QuestionProps {\r\n    id?: any, \r\n    active: boolean;\r\n    waitingForAnswers: boolean;\r\n    answer: string | undefined | null;\r\n    correctAnswer: string | undefined;\r\n    question: any;\r\n    opponents: any;\r\n}\r\n\r\nfunction RangeQuestionComponent(props: QuestionProps) {\r\n    console.log(\"Rendering question\")\r\n    console.log(\"The state players in question are\")\r\n    console.log(props.opponents)\r\n    let firstOpponentAnswer:any = undefined;\r\n    let secondOpponentAnswer: any = undefined;\r\n    props.opponents && Object.keys(props.opponents).forEach((key, index) => {\r\n        if(index === 0)\r\n            firstOpponentAnswer = props.opponents[key].currentAnswer;\r\n        if(index === 1)\r\n            secondOpponentAnswer = props.opponents[key].currentAnswer;\r\n    })\r\n    return (\r\n        <div className=\"question-container\">\r\n            <div className=\"question-body\">\r\n                <p>{props.question.body}</p>\r\n            </div>\r\n            <form onSubmit={service.sendRangedAnswer}>\r\n                <div className=\"form-group\">\r\n                    <input className={props.active ? \"\" : \"disabled\"} autoFocus type=\"number\" name=\"answer\" id=\"ranged-question-answer\" /> \r\n                </div>\r\n                <button className={props.active ? \"\" : \"disabled\"} type=\"submit\" value=\"Submit\">Submit</button>\r\n            </form>\r\n            {props.correctAnswer && \r\n                <div className=\"ranged-answer-container\">\r\n                    <h3 className=\"correct\">The correct answer is</h3>\r\n                    <div className=\"ranged-answer correct-answer\">{props.correctAnswer}</div>\r\n                </div>}\r\n            {props.waitingForAnswers && <div className=\"question-announcement\"><span>Waiting for other players to answer...</span></div>}\r\n            {!props.active && !props.waitingForAnswers && \r\n                <div className=\"ranged-answer-container\">\r\n                    {firstOpponentAnswer && <div className=\"ranged-answer opponent1\">{firstOpponentAnswer}</div>}\r\n                    {secondOpponentAnswer && <div className=\"ranged-answer opponent2\">{secondOpponentAnswer}</div>}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RangeQuestionComponent","import React from 'react';\r\n\r\nfunction GeneralLoader(props: any) {\r\n        return (\r\n            <div className=\"loader\">\r\n                <div className=\"loader-picture\"></div>\r\n                <p className=\"loader-text\">{props.text}</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default GeneralLoader;","import React from 'react';\r\n// import art from '../../images/art.svg';\r\n// import games from '../../images/games.svg';\r\n// import geography from '../../images/geography.svg';\r\n// import history from '../../images/history.svg';\r\n// import movies from '../../images/movies.svg';\r\n// import random from '../../images/random.svg';\r\n// import science from '../../images/science.svg';\r\n// import sports from '../../images/sports.svg';\r\nimport { PlayerInfo } from '../../reducers/gameReducer';\r\nimport PlayerAvatar from './PlayerAvatar';\r\n\r\n// let categories: any = {\r\n//     art: art,\r\n//     games: games,\r\n//     geography: geography,\r\n//     history: history,\r\n//     movies: movies,\r\n//     random: random,\r\n//     science: science,\r\n//     sports: sports\r\n// }\r\n\r\nexport interface GameInfoProps {\r\n   questionsCount: number,\r\n   currenQuestionNumber: number,\r\n   currentQuestionCategory: string | undefined,\r\n   playerInfo: PlayerInfo\r\n}\r\n\r\nfunction GameInfoComponent(props: GameInfoProps) {\r\n        // console.log(\"Curren question category is:\")\r\n        // console.log(props.currentQuestionCategory)\r\n        return (\r\n            <div className=\"game-info-container\">\r\n                <div className=\"game-progress\">\r\n                    <span className=\"block\">Progress:</span>\r\n                    <span className=\"block\">{props.currenQuestionNumber}/{props.questionsCount}</span>\r\n                </div>\r\n                <div className=\"current-question-category\"> \r\n                    <span className=\"block\">Category:</span>\r\n                    <span>{props.currentQuestionCategory ? props.currentQuestionCategory : \"Random\"}</span>    \r\n                </div>\r\n                <div className=\"player-info-container\">\r\n                    <PlayerAvatar {...Object.assign({class:'player'}, props.playerInfo)}/>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default GameInfoComponent","import React from 'react';\r\nimport { PlayerInfo } from '../../reducers/gameReducer';\r\nimport PlayerAvatar from './PlayerAvatar';\r\n\r\nexport interface ResolveRoundProps {\r\n    playerInfo: PlayerInfo | undefined;\r\n    opponents: any;\r\n    resolveData: any\r\n }\r\n \r\n function ResolveRoundComponent(props: ResolveRoundProps) {\r\n    let opponentKeys = Object.keys(props.opponents);\r\n    let playerKey:string;\r\n    props.playerInfo ? playerKey = props.playerInfo.id : playerKey = '123'\r\n    \r\n    let opponentOneProps = {\r\n    ...props.opponents[opponentKeys[0]],\r\n    class: \"opponent1\"\r\n    }\r\n    let opponentTwoProps = {\r\n    ...props.opponents[opponentKeys[1]],\r\n    class: \"opponent2\"\r\n    }\r\n     \r\n    if(props.resolveData[opponentKeys[0]].damage > 0)\r\n        opponentOneProps.damaged = true\r\n\r\n    if(props.resolveData[opponentKeys[0]].damage > 0)\r\n        opponentTwoProps.damaged = true\r\n\r\n    return (\r\n    <div className=\"resolve-round-container\">\r\n        <div className={props.resolveData[playerKey].damage > 0 ? \"resolve-player-container wrong\" : \"resolve-player-container correct\"}>\r\n            <PlayerAvatar {...Object.assign({class:'player'}, props.playerInfo, props.resolveData[playerKey].damage > 0 ? {damaged: true} : {})} />\r\n            <div className=\"player-resolve-status\">{props.resolveData[playerKey].damage > 0 ? `Takes ${props.resolveData[playerKey].damage} damage` : \"Answered correctly\"}</div>\r\n        </div>\r\n        <div className={props.resolveData[opponentKeys[0]].damage > 0 ? \"resolve-player-container wrong\" : \"resolve-player-container correct\"}>\r\n            <PlayerAvatar {...opponentOneProps} />\r\n            <div className=\"player-resolve-status\">{props.resolveData[opponentKeys[0]].damage > 0 ? `Takes ${props.resolveData[opponentKeys[0]].damage} damage` : \"Answered correctly\"}</div>\r\n        </div>\r\n        <div className={props.resolveData[opponentKeys[1]].damage > 0 ? \"resolve-player-container wrong\" : \"resolve-player-container correct\"}>\r\n            <PlayerAvatar {...opponentTwoProps} />\r\n            <div className=\"player-resolve-status\">{props.resolveData[opponentKeys[1]].damage > 0 ? `Takes ${props.resolveData[opponentKeys[1]].damage} damage` : \"Answered correctly\"}</div>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n }\r\n\r\n export default ResolveRoundComponent","import React from 'react';\r\nimport { PlayerInfo } from '../../reducers/gameReducer';\r\nimport PlayerAvatar from './PlayerAvatar';\r\nimport cupGold from '../../images/cupGold.svg';\r\nimport cupSilver from '../../images/cupSilver.svg';\r\nimport cupBronze from '../../images/cupBronze.svg';\r\nimport cloudRainIcon from '../../images/cloudRainIcon.svg';\r\nimport Button from '../shared/Button';\r\nimport { service } from '../../services/socket-service';\r\n\r\nlet prizeIcons:any = {\r\n    winner: cupGold,\r\n    second: cupSilver,\r\n    third: cupBronze,\r\n    loser: cloudRainIcon\r\n}\r\n\r\n\r\ninterface ResolveGameProps {\r\n    playerInfo: PlayerInfo,\r\n    opponents: any,\r\n    resolveGameData: any\r\n}\r\n\r\nfunction ResolveGameComponent(props: ResolveGameProps) {\r\n    let opponentKeys = Object.keys(props.opponents);\r\n    \r\n    let opponentOneProps = {\r\n    ...props.opponents[opponentKeys[0]],\r\n    class: \"opponent1\"\r\n    }\r\n    let opponentTwoProps = {\r\n    ...props.opponents[opponentKeys[1]],\r\n    class: \"opponent2\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"resolve-game-container\">\r\n            <div className=\"player-prize-icons-container\">\r\n                <img className={\"player-prize-icon \" + props.resolveGameData[props.playerInfo.id]}\r\n                        src={prizeIcons[props.resolveGameData[props.playerInfo.id]]}\r\n                        alt={props.resolveGameData[props.playerInfo.id]}></img>\r\n                <img className={\"player-prize-icon \" + props.resolveGameData[opponentKeys[0]]}\r\n                    src={prizeIcons[props.resolveGameData[opponentKeys[0]]]}\r\n                    alt={props.resolveGameData[opponentKeys[0]]}></img>\r\n                <img className={\"player-prize-icon \" + props.resolveGameData[opponentKeys[1]]} \r\n                    src={prizeIcons[props.resolveGameData[opponentKeys[1]]]}\r\n                    alt={props.resolveGameData[opponentKeys[1]]}></img>\r\n            </div>\r\n            <div className=\"resolve-game-player-container\">\r\n                <PlayerAvatar {...Object.assign({class:'player'}, props.playerInfo)} />\r\n            </div>\r\n            <div className=\"resolve-game-player-container\">\r\n                <PlayerAvatar {...opponentOneProps} />\r\n            </div>\r\n            <div className=\"resolve-game-player-container\">\r\n                <PlayerAvatar {...opponentTwoProps} />\r\n            </div>\r\n            <div className=\"resolve-announcement\">\r\n                <span>\r\n                    {props.resolveGameData[props.playerInfo.id] === 'winner' && \"You win!\"}\r\n                    {props.resolveGameData[props.playerInfo.id] === 'second' && \"You finished second!\"}\r\n                    {props.resolveGameData[props.playerInfo.id] === 'third' && \"You finished third\"}\r\n                </span>\r\n            </div>\r\n            <Button {...{btnName: \"Return to lobby\", onClick: service.endGame}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResolveGameComponent","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n// import { socket } from '../App';\r\nimport { UserState } from '../reducers/userReducer';\r\nimport { AppState } from '../store/Store';\r\nimport { service } from '../services/socket-service';\r\nimport { GameState, GameStatus } from '../reducers/gameReducer';\r\nimport PlayerAvatar from './game/PlayerAvatar';\r\nimport MultipleAnswerQuestionComponent from './game/MultipleAnswerQuestionComponent';\r\nimport RangeQuestionComponent from './game/RangeQuestionComponent';\r\nimport GeneralLoader from'./shared/GeneralLoader';\r\nimport GameInfoComponent from './game/GameInfoComponent';\r\nimport ResolveRoundContainer from './game/ResolveRoundComponent';\r\nimport ResolveGameComponent from './game/ResolveGameComponent';\r\n\r\ninterface AppProps {\r\n  userState: UserState,\r\n  gameState: GameState\r\n}\r\n\r\nclass Game extends React.Component<AppProps> {\r\n  componentWillMount() {\r\n    this.props.gameState.status === GameStatus.STARTING && console.log(\"Game starting\");\r\n    \r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.props.gameState.status === GameStatus.RUNNING && service.getQuestion();\r\n    this.props.gameState.status === GameStatus.GETTING_NEXT_QUESTION && service.getQuestion();\r\n  }\r\n\r\n  render() {\r\n    let element: any;\r\n    let status: GameStatus = this.props.gameState.status;\r\n    let question = this.props.gameState.currentQuestion;\r\n    let opponents = this.props.gameState.opponents;\r\n    let gameInfo = this.props.gameState.gameInfo;\r\n    let playerInfo = this.props.gameState.playerInfo;\r\n    // let opponentOneProps: any;\r\n    // let opponentTwoProps: any;\r\n    let showGameInfo = false;\r\n    let gameInfoProps: any;\r\n\r\n    console.log(\"Status is\", status)\r\n    switch (status) {\r\n      case GameStatus.SEARCHING_FOR_GAME: {\r\n        element = <GeneralLoader text=\"Searching for a game...\" />;\r\n        break;\r\n      }\r\n      case GameStatus.STARTING: {\r\n        let opponentKeys = Object.keys(opponents);\r\n      \r\n        let opponentOneProps = {\r\n          ...opponents[opponentKeys[0]],\r\n          class: \"opponent1\"\r\n        }\r\n        let opponentTwoProps = {\r\n          ...opponents[opponentKeys[1]],\r\n          class: \"opponent2\"\r\n        }\r\n        element = <div className=\"players-announcement-container\">\r\n            <h2>Starting new game with players</h2>\r\n            <div className=\"player-info-container\"><PlayerAvatar {...Object.assign({class:'player'}, playerInfo)} /></div>\r\n            <div className=\"player-info-container\"><PlayerAvatar {...opponentOneProps} /></div>\r\n            <div className=\"player-info-container\"><PlayerAvatar {...opponentTwoProps} /></div>\r\n          </div>\r\n        break;\r\n      }\r\n      case GameStatus.RUNNING: {\r\n        showGameInfo = true;\r\n        element = <GeneralLoader text=\"Loading next question...\" />\r\n        break;\r\n      }\r\n      case GameStatus.GETTING_NEXT_QUESTION: {\r\n        showGameInfo = true;\r\n        element = <GeneralLoader text=\"Loading next question...\" />\r\n        break;\r\n      }\r\n      case GameStatus.WAITING_FOR_ANSWER: {\r\n        showGameInfo = true;\r\n        let props = {\r\n          active: true,\r\n          waitingForAnswers: false,\r\n          question: this.props.gameState.currentQuestion,\r\n          answer: undefined,\r\n          correctAnswer: undefined,\r\n          opponents: undefined\r\n        }\r\n        console.log(\"Question type is\", question && question.questionType)\r\n        element = question && question.questionType === \"multiple\" ? <MultipleAnswerQuestionComponent {...props}/> : <RangeQuestionComponent {...props} />;\r\n        break;\r\n      }\r\n      case GameStatus.ANSWER_SUBMITTED: {\r\n        showGameInfo = true;\r\n        let props = {\r\n          active: false,\r\n          waitingForAnswers: true,\r\n          question: this.props.gameState.currentQuestion,\r\n          answer: this.props.gameState.currentAnswer,\r\n          correctAnswer: undefined,\r\n          opponents: undefined\r\n        }\r\n        element = question && question.questionType === \"multiple\" ? <MultipleAnswerQuestionComponent {...props}/> : <RangeQuestionComponent {...props} />;\r\n        break;\r\n      }\r\n      case GameStatus.RESOLVING_ANSWERS: {\r\n        showGameInfo = true;\r\n        let props = {\r\n          active: false,\r\n          waitingForAnswers: false,\r\n          question: this.props.gameState.currentQuestion,\r\n          answer: this.props.gameState.currentAnswer,\r\n          correctAnswer: this.props.gameState.correctAnswer,\r\n          opponents: this.props.gameState.opponents\r\n        }\r\n        element = question && question.questionType === \"multiple\" ? <MultipleAnswerQuestionComponent {...props}/> : <RangeQuestionComponent {...props} />;\r\n        break;\r\n      }\r\n      case GameStatus.RESOLVING_ROUND: {\r\n        showGameInfo = true;\r\n        let resolveRoundProps = {\r\n          playerInfo: playerInfo,\r\n          opponents: opponents,\r\n          resolveData: this.props.gameState.resolveData\r\n        }\r\n        element = <ResolveRoundContainer {...resolveRoundProps} />\r\n        break;\r\n      }\r\n      case GameStatus.RESOLVING_GAME: {\r\n        if (playerInfo && this.props.gameState.resolveGameData) {\r\n          let resolveGameProps = {\r\n            playerInfo: playerInfo,\r\n            opponents: opponents,\r\n            resolveGameData: this.props.gameState.resolveGameData\r\n          }\r\n          \r\n           element = <ResolveGameComponent {...resolveGameProps} />\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        element = <div>Unknown status...</div>;\r\n        break;\r\n      }\r\n    }\r\n      \r\n    // if(opponents) {\r\n    //   console.log(\"There are opponents\")\r\n    //   console.log(opponents)\r\n      \r\n      // let opponentKeys = Object.keys(opponents);\r\n      \r\n      // opponentOneProps = {\r\n      //   class: \"opponent1\",\r\n      //   nickName: opponents[opponentKeys[0]].nickName,\r\n      //   avatar: opponents[opponentKeys[0]].avatar,\r\n      //   health: opponents[opponentKeys[0]].health\r\n      // }\r\n      // opponentTwoProps = {\r\n      //   class: \"opponent2\",\r\n      //   nickName: opponents[opponentKeys[1]].nickName,\r\n      //   avatar: opponents[opponentKeys[1]].avatar,\r\n      //   health: opponents[opponentKeys[1]].health\r\n      // }\r\n    // }\r\n\r\n    if(gameInfo) {\r\n      gameInfoProps = {\r\n        questionsCount: gameInfo.questionsCount,\r\n        currenQuestionNumber: gameInfo.currentQuestionNumber,\r\n        currentQuestionCategory: question && question.category,\r\n        playerInfo: playerInfo\r\n      }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"game-section\">\r\n          {showGameInfo && <GameInfoComponent {...gameInfoProps} />}\r\n          {element}\r\n          {/* <div className=\"opponents-container\">\r\n            {opponents && <PlayerAvatar {...opponentOneProps} />}\r\n            {opponents && <PlayerAvatar {...opponentTwoProps} />}\r\n          </div> */}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Grab the characters from the store and make them available on props\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    userState: store.userState,\r\n    gameState: store.gameState\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Game);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { UserState, PlayerStatus } from './reducers/userReducer';\r\nimport { AppState } from './store/Store';\r\nimport Menu from './components/Menu';\r\nimport LoginSignup from './components/LoginSignup';\r\nimport Game from './components/Game';\r\nimport GeneralLoader from './components/shared/GeneralLoader';\r\nimport { GameState } from './reducers/gameReducer';\r\nimport { GeneralAppState } from './reducers/generalAppReducer';\r\n\r\ninterface AppProps {\r\n  dispatch: any,\r\n  userState: UserState,\r\n  gameState: GameState,\r\n  generalAppState: GeneralAppState\r\n}\r\n\r\nclass App extends React.Component<AppProps> {\r\n  render() {\r\n    console.log(\"Rendering App\")\r\n    let userState = this.props.userState;\r\n    let element: any;\r\n    if (this.props.generalAppState.isError) {\r\n      element = <div>{this.props.generalAppState.error}</div>\r\n    } else {\r\n      switch (true) {\r\n        case userState.isLoading:\r\n          element = <GeneralLoader text=\"Loading...\"/>;\r\n          break;\r\n        case userState.user === undefined:\r\n          element = <LoginSignup />;\r\n          break;\r\n        case userState.status === PlayerStatus.IDLE:\r\n          element = <Menu />;\r\n          break;\r\n        case userState.status === PlayerStatus.SEARCHING_FOR_RANDOM_GAME:\r\n          element = <Game />;\r\n          break;\r\n        case userState.status === PlayerStatus.PLAYING:\r\n          element = <Game />;\r\n          break;\r\n        default: \r\n          element = <LoginSignup />;\r\n          break;\r\n      }\r\n    }\r\n    \r\n    return(\r\n      <div className=\"main\">\r\n        { element }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// Grab the characters from the store and make them available on props\r\nconst mapStateToProps = (store: AppState) => {\r\n  return {\r\n    userState: store.userState,\r\n    gameState: store.gameState,\r\n    generalAppState: store.generalAppState\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Reducer } from 'redux';\r\nimport { GeneralAppActionTypes, GeneralAppActions } from '../actions/GeneralAppActions'\r\n\r\nexport interface GeneralAppState {\r\n    isError: boolean,\r\n    error: string\r\n}\r\n\r\nconst initialAppState: GeneralAppState = {\r\n    isError: false,\r\n    error: ''\r\n}\r\n\r\nexport const generalAppReducer: Reducer<GeneralAppState, GeneralAppActions> = (\r\n    state = initialAppState,\r\n    action\r\n) => { \r\n    switch (action.type) {\r\n        case GeneralAppActionTypes.ERROR:\r\n            return {\r\n                ...state,\r\n                isError: true,\r\n                error: action.message\r\n            }\r\n        default: {\r\n            console.log(\"App action defaulted\");\r\n            return state;\r\n        }\r\n            \r\n    }\r\n}","import { combineReducers, createStore, Store } from 'redux';\r\nimport {generalAppReducer, GeneralAppState} from '../reducers/generalAppReducer';\r\nimport {userReducer, UserState} from '../reducers/userReducer';\r\nimport { GameState, gameReducer } from '../reducers/gameReducer';\r\n\r\n\r\nexport interface AppState {\r\n    userState: UserState,\r\n    gameState: GameState,\r\n    generalAppState: GeneralAppState\r\n}\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n    userState: userReducer,\r\n    gameState: gameReducer,\r\n    generalAppState: generalAppReducer\r\n})\r\n\r\nexport default function configureStore(): Store<AppState> {\r\n    const store = createStore(rootReducer);\r\n    return store;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { Store } from 'redux';\r\nimport configureStore, { AppState } from './store/Store';\r\nimport { service } from './services/socket-service';\r\n\r\ninterface AppProps {\r\n    store: Store<AppState>\r\n}\r\n\r\nconst Root: React.SFC<AppProps> = props => {\r\n    service.init();\r\n    return (\r\n        <Provider store={props.store}>\r\n           <App />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport const store = configureStore();\r\n\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById('root') as HTMLElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}